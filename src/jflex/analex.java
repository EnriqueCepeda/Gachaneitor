/* The following code was generated by JFlex 1.7.0 */

//* --------------------------Seccion codigo-usuario ------------------------*/ 
import java.io.*;

class Utility{

  private static final String errorMsg[] = {
    "Unmatched end of comment punctuation", 
    "Texto de ejemplo xd"
  };

  public static final int E_ENDCOMMENT = 0; 
  public static final int E_EJEMPLO = 1;


  public static void error(int code, String cadena, int line, int column) {
    System.out.println("errorMsg[code]: "+ cadena + " en la l√≠nea: "+ line + " y columna: " + column);
  }

  }

/* -----------------Seccion de opciones y declaraciones -----------------*/ 
/*--OPCIONES --*/ 
/* Nombre de la clase generada para el analizadorlexico*/ 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>AnalizadorLexico.flex</tt>
 */
class analex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int DESCRIPCION = 4;
  public static final int IDENTIFICADOR = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\34\1\1\1\1\1\56\1\56\1\1\16\34\4\0\1\2\1\0"+
    "\1\52\1\0\1\37\5\0\1\54\2\0\1\44\1\34\1\53\1\51"+
    "\11\46\1\42\1\43\5\0\2\37\1\33\2\37\1\33\24\37\1\45"+
    "\1\0\1\55\1\0\1\37\1\0\1\7\1\15\1\5\1\16\1\14"+
    "\1\25\1\27\1\26\1\4\1\17\1\30\1\3\1\12\1\23\1\13"+
    "\1\20\1\37\1\10\1\21\1\11\1\6\1\24\3\37\1\22\1\40"+
    "\1\1\1\41\1\0\6\34\1\57\32\34\2\0\4\37\3\0\1\36"+
    "\1\37\2\0\1\34\7\0\1\37\4\0\1\32\5\0\2\37\1\31"+
    "\1\35\23\37\1\0\37\37\1\0\u01ca\37\4\0\14\37\16\0\5\37"+
    "\7\0\1\37\1\0\1\37\21\0\160\34\5\37\1\0\2\37\2\0"+
    "\4\37\10\0\1\37\1\0\3\37\1\0\1\37\1\0\24\37\1\0"+
    "\123\37\1\0\213\37\1\0\5\34\2\0\236\37\11\0\46\37\2\0"+
    "\1\37\7\0\47\37\7\0\1\37\1\0\55\34\1\0\1\34\1\0"+
    "\2\34\1\0\2\34\1\0\1\34\10\0\33\37\5\0\3\37\15\0"+
    "\5\34\6\0\1\37\4\0\13\34\5\0\53\37\25\34\12\50\4\0"+
    "\2\37\1\34\143\37\1\0\1\37\10\34\1\0\6\34\2\37\2\34"+
    "\1\0\4\34\2\37\12\50\3\37\2\0\1\37\17\0\1\34\1\37"+
    "\1\34\36\37\33\34\2\0\131\37\13\34\1\37\16\0\12\50\41\37"+
    "\11\34\2\37\4\0\1\37\5\0\26\37\4\34\1\37\11\34\1\37"+
    "\3\34\1\37\5\34\22\0\31\37\3\34\104\0\1\37\1\0\13\37"+
    "\67\0\33\34\1\0\4\34\66\37\3\34\1\37\22\34\1\37\7\34"+
    "\12\37\2\34\2\0\12\50\1\0\7\37\1\0\7\37\1\0\3\34"+
    "\1\0\10\37\2\0\2\37\2\0\26\37\1\0\7\37\1\0\1\37"+
    "\3\0\4\37\2\0\1\34\1\37\7\34\2\0\2\34\2\0\3\34"+
    "\1\37\10\0\1\34\4\0\2\37\1\0\3\37\2\34\2\0\12\50"+
    "\4\37\7\0\1\37\5\0\3\34\1\0\6\37\4\0\2\37\2\0"+
    "\26\37\1\0\7\37\1\0\2\37\1\0\2\37\1\0\2\37\2\0"+
    "\1\34\1\0\5\34\4\0\2\34\2\0\3\34\3\0\1\34\7\0"+
    "\4\37\1\0\1\37\7\0\12\50\2\34\3\37\1\34\13\0\3\34"+
    "\1\0\11\37\1\0\3\37\1\0\26\37\1\0\7\37\1\0\2\37"+
    "\1\0\5\37\2\0\1\34\1\37\10\34\1\0\3\34\1\0\3\34"+
    "\2\0\1\37\17\0\2\37\2\34\2\0\12\50\1\0\1\37\17\0"+
    "\3\34\1\0\10\37\2\0\2\37\2\0\26\37\1\0\7\37\1\0"+
    "\2\37\1\0\5\37\2\0\1\34\1\37\7\34\2\0\2\34\2\0"+
    "\3\34\10\0\2\34\4\0\2\37\1\0\3\37\2\34\2\0\12\50"+
    "\1\0\1\37\20\0\1\34\1\37\1\0\6\37\3\0\3\37\1\0"+
    "\4\37\3\0\2\37\1\0\1\37\1\0\2\37\3\0\2\37\3\0"+
    "\3\37\3\0\14\37\4\0\5\34\3\0\3\34\1\0\4\34\2\0"+
    "\1\37\6\0\1\34\16\0\12\50\11\0\1\37\7\0\3\34\1\0"+
    "\10\37\1\0\3\37\1\0\27\37\1\0\12\37\1\0\5\37\3\0"+
    "\1\37\7\34\1\0\3\34\1\0\4\34\7\0\2\34\1\0\2\37"+
    "\6\0\2\37\2\34\2\0\12\50\22\0\2\34\1\0\10\37\1\0"+
    "\3\37\1\0\27\37\1\0\12\37\1\0\5\37\2\0\1\34\1\37"+
    "\7\34\1\0\3\34\1\0\4\34\7\0\2\34\7\0\1\37\1\0"+
    "\2\37\2\34\2\0\12\50\1\0\2\37\17\0\2\34\1\0\10\37"+
    "\1\0\3\37\1\0\51\37\2\0\1\37\7\34\1\0\3\34\1\0"+
    "\4\34\1\37\10\0\1\34\10\0\2\37\2\34\2\0\12\50\12\0"+
    "\6\37\2\0\2\34\1\0\22\37\3\0\30\37\1\0\11\37\1\0"+
    "\1\37\2\0\7\37\3\0\1\34\4\0\6\34\1\0\1\34\1\0"+
    "\10\34\6\0\12\47\2\0\2\34\15\0\60\37\1\34\2\37\7\34"+
    "\4\0\10\37\10\34\1\0\12\50\47\0\2\37\1\0\1\37\2\0"+
    "\2\37\1\0\1\37\2\0\1\37\6\0\4\37\1\0\7\37\1\0"+
    "\3\37\1\0\1\37\1\0\1\37\2\0\2\37\1\0\4\37\1\34"+
    "\2\37\6\34\1\0\2\34\1\37\2\0\5\37\1\0\1\37\1\0"+
    "\6\34\2\0\12\50\2\0\4\37\40\0\1\37\27\0\2\34\6\0"+
    "\12\50\13\0\1\34\1\0\1\34\1\0\1\34\4\0\2\34\10\37"+
    "\1\0\44\37\4\0\24\34\1\0\2\34\5\37\13\34\1\0\44\34"+
    "\11\0\1\34\71\0\53\37\24\34\1\37\12\50\6\0\6\37\4\34"+
    "\4\37\3\34\1\37\3\34\2\37\7\34\3\37\4\34\15\37\14\34"+
    "\1\37\1\34\12\50\4\34\2\0\46\37\1\0\1\37\5\0\1\37"+
    "\2\0\53\37\1\0\u014d\37\1\0\4\37\2\0\7\37\1\0\1\37"+
    "\1\0\4\37\2\0\51\37\1\0\4\37\2\0\41\37\1\0\4\37"+
    "\2\0\7\37\1\0\1\37\1\0\4\37\2\0\17\37\1\0\71\37"+
    "\1\0\4\37\2\0\103\37\2\0\3\34\40\0\20\37\20\0\125\37"+
    "\14\0\u026c\37\2\0\21\37\1\0\32\37\5\0\113\37\3\0\3\37"+
    "\17\0\15\37\1\0\4\37\3\34\13\0\22\37\3\34\13\0\22\37"+
    "\2\34\14\0\15\37\1\0\3\37\1\0\2\34\14\0\64\37\40\34"+
    "\3\0\1\37\3\0\2\37\1\34\2\0\12\50\41\0\3\34\2\0"+
    "\12\50\6\0\130\37\10\0\51\37\1\34\1\37\5\0\106\37\12\0"+
    "\35\37\3\0\14\34\4\0\14\34\12\0\12\50\36\37\2\0\5\37"+
    "\13\0\54\37\4\0\21\34\7\37\2\34\6\0\12\50\46\0\27\37"+
    "\5\34\4\0\65\37\12\34\1\0\35\34\2\0\1\34\12\50\6\0"+
    "\12\50\15\0\1\37\130\0\5\34\57\37\21\34\7\37\4\0\12\50"+
    "\21\0\11\34\14\0\3\34\36\37\15\34\2\37\12\50\54\37\16\34"+
    "\14\0\44\37\24\34\10\0\12\50\3\0\3\37\12\50\44\37\122\0"+
    "\3\34\1\0\25\34\4\37\1\34\4\37\3\34\2\37\11\0\300\37"+
    "\47\34\25\0\4\34\u0116\37\2\0\6\37\2\0\46\37\2\0\6\37"+
    "\2\0\10\37\1\0\1\37\1\0\1\37\1\0\1\37\1\0\37\37"+
    "\2\0\65\37\1\0\7\37\1\0\1\37\3\0\3\37\1\0\7\37"+
    "\3\0\4\37\2\0\6\37\4\0\15\37\5\0\3\37\1\0\7\37"+
    "\16\0\5\34\30\0\1\56\1\56\5\34\20\0\2\37\23\0\1\37"+
    "\13\0\5\34\5\0\6\34\1\0\1\37\15\0\1\37\20\0\15\37"+
    "\3\0\33\37\25\0\15\34\4\0\1\34\3\0\14\34\21\0\1\37"+
    "\4\0\1\37\2\0\12\37\1\0\1\37\3\0\5\37\6\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\4\37\1\0\13\37\2\0\4\37"+
    "\5\0\5\37\4\0\1\37\21\0\51\37\u0a77\0\57\37\1\0\57\37"+
    "\1\0\205\37\6\0\4\37\3\34\2\37\14\0\46\37\1\0\1\37"+
    "\5\0\1\37\2\0\70\37\7\0\1\37\17\0\1\34\27\37\11\0"+
    "\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0"+
    "\7\37\1\0\7\37\1\0\7\37\1\0\40\34\57\0\1\37\u01d5\0"+
    "\3\37\31\0\11\37\6\34\1\0\5\37\2\0\5\37\4\0\126\37"+
    "\2\0\2\34\2\0\3\37\1\0\132\37\1\0\4\37\5\0\51\37"+
    "\3\0\136\37\21\0\33\37\65\0\20\37\u0200\0\u19b6\37\112\0\u51cd\37"+
    "\63\0\u048d\37\103\0\56\37\2\0\u010d\37\3\0\20\37\12\50\2\37"+
    "\24\0\57\37\1\34\4\0\12\34\1\0\31\37\7\0\1\34\120\37"+
    "\2\34\45\0\11\37\2\0\147\37\2\0\4\37\1\0\4\37\14\0"+
    "\13\37\115\0\12\37\1\34\3\37\1\34\4\37\1\34\27\37\5\34"+
    "\20\0\1\37\7\0\64\37\14\0\2\34\62\37\21\34\13\0\12\50"+
    "\6\0\22\34\6\37\3\0\1\37\4\0\12\50\34\37\10\34\2\0"+
    "\27\37\15\34\14\0\35\37\3\0\4\34\57\37\16\34\16\0\1\37"+
    "\12\50\26\0\12\47\6\0\51\37\16\34\11\0\3\37\1\34\10\37"+
    "\2\34\2\0\12\50\6\0\27\37\3\0\1\37\1\34\4\0\60\37"+
    "\1\34\1\37\3\34\2\37\2\34\5\37\2\34\1\37\1\34\1\37"+
    "\30\0\3\37\2\0\13\37\5\34\2\0\3\37\2\34\12\0\6\37"+
    "\2\0\6\37\2\0\6\37\11\0\7\37\1\0\7\37\221\0\43\37"+
    "\10\34\1\0\2\34\2\0\12\50\6\0\u2ba4\37\14\0\27\37\4\0"+
    "\61\37\u2104\0\u016e\37\2\0\152\37\46\0\7\37\14\0\5\37\5\0"+
    "\1\37\1\34\12\37\1\0\15\37\1\0\5\37\1\0\1\37\1\0"+
    "\2\37\1\0\2\37\1\0\154\37\41\0\u016b\37\22\0\100\37\2\0"+
    "\66\37\50\0\15\37\3\0\20\34\20\0\7\34\14\0\2\37\30\0"+
    "\3\37\31\0\1\37\6\0\5\37\1\0\207\37\2\0\1\34\4\0"+
    "\1\37\13\0\12\50\7\0\32\37\4\0\1\37\1\0\32\37\13\0"+
    "\131\37\3\0\6\37\2\0\6\37\2\0\6\37\2\0\3\37\3\0"+
    "\2\37\3\0\2\37\22\0\3\34\4\0\14\37\1\0\32\37\1\0"+
    "\23\37\1\0\2\37\1\0\17\37\2\0\16\37\42\0\173\37\105\0"+
    "\65\37\210\0\1\34\202\0\35\37\3\0\61\37\57\0\37\37\21\0"+
    "\33\37\65\0\36\37\2\0\44\37\4\0\10\37\1\0\5\37\52\0"+
    "\236\37\2\0\12\50\u0356\0\6\37\2\0\1\37\1\0\54\37\1\0"+
    "\2\37\3\0\1\37\2\0\27\37\252\0\26\37\12\0\32\37\106\0"+
    "\70\37\6\0\2\37\100\0\1\37\3\34\1\0\2\34\5\0\4\34"+
    "\4\37\1\0\3\37\1\0\33\37\4\0\3\34\4\0\1\34\40\0"+
    "\35\37\203\0\66\37\12\0\26\37\12\0\23\37\215\0\111\37\u03b7\0"+
    "\3\34\65\37\17\34\37\0\12\50\20\0\3\34\55\37\13\34\2\0"+
    "\1\34\22\0\31\37\7\0\12\50\6\0\3\34\44\37\16\34\1\0"+
    "\12\50\100\0\3\34\60\37\16\34\4\37\13\0\12\50\u0116\0\12\47"+
    "\u0156\0\12\47\166\0\12\47\u0176\0\12\47\46\0\53\37\15\34\10\0"+
    "\12\50\146\0\12\47\u01a6\0\12\47\u0366\0\12\47\u03a6\0\u036f\37\221\0"+
    "\143\37\u0b9d\0\u042f\37\u33d1\0\u0239\37\47\0\12\47\346\0\12\47\u03a6\0"+
    "\105\37\13\0\1\37\56\34\20\0\4\34\15\37\u4060\0\2\37\u2163\0"+
    "\5\34\3\0\26\34\2\0\7\34\36\0\4\34\224\0\3\34\u01bb\0"+
    "\125\37\1\0\107\37\1\0\2\37\2\0\1\37\2\0\2\37\2\0"+
    "\4\37\1\0\14\37\1\0\1\37\1\0\7\37\1\0\101\37\1\0"+
    "\4\37\2\0\10\37\1\0\7\37\1\0\34\37\1\0\4\37\1\0"+
    "\5\37\1\0\1\37\3\0\7\37\1\0\u0154\37\2\0\31\37\1\0"+
    "\31\37\1\0\37\37\1\0\31\37\1\0\37\37\1\0\31\37\1\0"+
    "\37\37\1\0\31\37\1\0\37\37\1\0\31\37\1\0\10\37\2\0"+
    "\62\50\u1150\0\12\47\u04a6\0\4\37\1\0\33\37\1\0\2\37\1\0"+
    "\1\37\2\0\1\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\1\37\6\0\1\37\4\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\1\37\2\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\2\37\1\0\1\37\2\0"+
    "\4\37\1\0\7\37\1\0\4\37\1\0\4\37\1\0\1\37\1\0"+
    "\12\37\1\0\21\37\5\0\3\37\1\0\5\37\1\0\21\37\u1144\0"+
    "\ua6d7\37\51\0\u1035\37\13\0\336\37\u3fe2\0\u021e\37\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\34\36\0\140\34\200\0\360\34\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\0\1\2\1\3\1\4\16\2\1\5"+
    "\1\4\2\2\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\2\1\17\1\20\1\17\2\1"+
    "\1\21\2\22\1\23\3\0\1\4\26\0\1\24\12\0"+
    "\1\5\16\0\1\25\33\0\1\26\1\0\1\27\3\0"+
    "\1\30\1\0\1\31\5\0\1\32\1\33\4\0\1\34"+
    "\1\0\1\35\23\0\1\36\7\0\1\37\1\40\1\41"+
    "\1\42\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\300\0\360\0\u0120"+
    "\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\300\0\300\0\300\0\300\0\300\0\300\0\u0480"+
    "\0\u04b0\0\300\0\u04e0\0\300\0\300\0\u0510\0\u0540\0\u0570"+
    "\0\300\0\u05a0\0\u05d0\0\300\0\u0600\0\u0630\0\u0660\0\300"+
    "\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0"+
    "\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960"+
    "\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\300\0\u0ab0"+
    "\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30"+
    "\0\u0c60\0\300\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80"+
    "\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00"+
    "\0\300\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050"+
    "\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0"+
    "\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350"+
    "\0\u1380\0\u13b0\0\u13e0\0\u1410\0\300\0\u1440\0\300\0\u1470"+
    "\0\u14a0\0\u14d0\0\300\0\u1500\0\300\0\u1530\0\u1560\0\u1590"+
    "\0\u15c0\0\u15f0\0\300\0\300\0\u1620\0\u1650\0\u1680\0\u16b0"+
    "\0\300\0\u16e0\0\300\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0"+
    "\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u1920\0\u1950"+
    "\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\300\0\u1aa0"+
    "\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\300\0\300"+
    "\0\300\0\300\0\u1bf0\0\u1c20\0\u1c50";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\5\1\17\1\20\1\21\1\5\1\22"+
    "\1\23\1\5\1\24\1\25\1\5\1\26\1\27\1\30"+
    "\1\31\6\5\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\2\5\1\41\1\42\1\43\4\5\1\44\2\45"+
    "\51\44\1\46\1\44\3\5\34\47\1\50\1\5\1\47"+
    "\6\5\1\47\1\5\2\47\3\5\1\51\1\5\1\47"+
    "\2\5\32\52\1\5\1\53\1\5\1\52\12\5\1\54"+
    "\5\5\64\0\1\55\76\0\1\56\47\0\1\57\62\0"+
    "\1\60\53\0\1\61\61\0\1\62\47\0\1\63\3\0"+
    "\1\64\2\0\1\65\1\66\46\0\1\60\1\67\6\0"+
    "\1\70\1\71\12\0\1\60\51\0\1\72\45\0\1\73"+
    "\64\0\1\74\52\0\1\75\1\76\3\0\1\77\56\0"+
    "\1\100\1\101\56\0\1\102\60\0\1\103\57\0\1\104"+
    "\51\0\1\105\100\0\1\60\62\0\1\106\73\0\4\40"+
    "\54\0\1\41\65\0\1\107\56\0\1\51\5\0\34\47"+
    "\1\50\1\0\1\47\6\0\1\47\1\0\2\47\5\0"+
    "\1\47\1\0\34\47\1\50\2\47\6\0\1\47\1\0"+
    "\2\47\5\0\1\47\2\0\32\52\1\0\1\53\1\0"+
    "\1\52\22\0\32\52\1\0\1\53\2\52\25\0\1\110"+
    "\101\0\1\111\35\0\1\112\61\0\1\113\55\0\1\114"+
    "\66\0\1\115\47\0\1\116\6\0\1\117\55\0\1\120"+
    "\60\0\1\121\70\0\1\122\37\0\1\123\76\0\1\124"+
    "\42\0\1\125\63\0\1\126\65\0\1\127\1\0\1\130"+
    "\57\0\1\131\52\0\1\132\46\0\1\133\101\0\1\134"+
    "\61\0\1\122\42\0\1\135\50\0\1\136\64\0\1\137"+
    "\53\0\1\140\106\0\1\141\32\0\1\142\61\0\1\143"+
    "\53\0\1\144\74\0\1\142\52\0\1\145\55\0\1\146"+
    "\56\0\1\147\53\0\1\150\61\0\1\151\70\0\1\152"+
    "\53\0\1\153\50\0\1\154\61\0\1\155\54\0\1\153"+
    "\62\0\1\156\55\0\1\157\65\0\1\160\64\0\1\161"+
    "\46\0\1\162\60\0\1\163\64\0\1\164\55\0\1\165"+
    "\70\0\1\166\54\0\1\167\45\0\1\153\64\0\1\170"+
    "\66\0\1\171\45\0\1\172\66\0\1\173\45\0\1\174"+
    "\65\0\1\133\46\0\1\175\70\0\1\176\53\0\1\177"+
    "\52\0\1\142\57\0\1\200\64\0\1\201\57\0\1\202"+
    "\70\0\1\203\45\0\1\204\60\0\1\205\63\0\1\166"+
    "\53\0\1\206\54\0\1\207\56\0\1\210\62\0\1\210"+
    "\66\0\1\211\50\0\1\212\57\0\1\213\63\0\1\214"+
    "\54\0\1\142\57\0\1\215\74\0\1\167\42\0\1\216"+
    "\53\0\1\217\63\0\1\220\63\0\1\221\47\0\1\222"+
    "\63\0\1\223\53\0\1\224\63\0\1\225\56\0\1\226"+
    "\64\0\1\227\63\0\1\230\46\0\1\231\66\0\1\232"+
    "\55\0\1\233\45\0\1\234\66\0\1\235\66\0\1\236"+
    "\44\0\1\237\57\0\1\240\61\0\1\241\73\0\1\242"+
    "\43\0\1\243\56\0\1\244\64\0\1\113\50\0\1\245"+
    "\57\0\1\246\71\0\1\247\52\0\1\250\51\0\1\251"+
    "\64\0\1\252\62\0\1\253\57\0\1\254\60\0\1\255"+
    "\45\0\1\256\64\0\1\257\73\0\1\260\57\0\1\261"+
    "\55\0\1\262\62\0\1\263\42\0\1\264\70\0\1\265"+
    "\52\0\1\210\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7296];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\0\2\11\23\1\6\11\2\1\1\11"+
    "\1\1\2\11\3\1\1\11\2\1\1\11\3\0\1\11"+
    "\26\0\1\11\12\0\1\11\16\0\1\11\33\0\1\11"+
    "\1\0\1\11\3\0\1\11\1\0\1\11\5\0\2\11"+
    "\4\0\1\11\1\0\1\11\23\0\1\11\7\0\4\11"+
    "\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  analex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2914) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Token cadena <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 35: break;
          case 2: 
            { System.out.print(yytext());
            } 
            // fall through
          case 36: break;
          case 3: 
            { 
            } 
            // fall through
          case 37: break;
          case 4: 
            { System.out.println("Token unidad_cantidad <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 38: break;
          case 5: 
            { System.out.println("Token unidad_tiempo <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 39: break;
          case 6: 
            { System.out.println("Token { encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 40: break;
          case 7: 
            { System.out.println("Token } encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 41: break;
          case 8: 
            { System.out.println("Token ':' encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 42: break;
          case 9: 
            { System.out.println("Token ';' encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 43: break;
          case 10: 
            { System.out.println("Token '-' encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 44: break;
          case 11: 
            { System.out.println("Token '[' encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
    yybegin(DESCRIPCION);
            } 
            // fall through
          case 45: break;
          case 12: 
            { System.out.println("Token numero <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 46: break;
          case 13: 
            { System.out.println("Token digito_velocidad <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 47: break;
          case 14: 
            { System.out.println("Token comilla <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
 yybegin(IDENTIFICADOR);
            } 
            // fall through
          case 48: break;
          case 15: 
            { /*Ignoramos el contenido de los comentarios*/
            } 
            // fall through
          case 49: break;
          case 16: 
            { /*Ignoramos los saltos de l√≠nea de los comentarios*/
            } 
            // fall through
          case 50: break;
          case 17: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 51: break;
          case 18: 
            { System.out.println("Token IDENT <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 52: break;
          case 19: 
            { System.out.println("Token comilla <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
    yybegin(YYINITIAL);
            } 
            // fall through
          case 53: break;
          case 20: 
            { yybegin(COMENTARIO); System.out.println("Token Comentario encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 54: break;
          case 21: 
            { System.out.println("Token unidad_temperatura <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 55: break;
          case 22: 
            { System.out.println("Token total encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 56: break;
          case 23: 
            { System.out.println("Token verbo_mov <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 57: break;
          case 24: 
            { System.out.println("Token pasos encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 58: break;
          case 25: 
            { System.out.println("Token verbo_per <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 59: break;
          case 26: 
            { System.out.println("Token receta encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 60: break;
          case 27: 
            { System.out.println("Token tiempo encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 61: break;
          case 28: 
            { System.out.println("Token nombre encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 62: break;
          case 29: 
            { System.out.println("Token verbo_coc <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 63: break;
          case 30: 
            { System.out.println("Token velocidad encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 64: break;
          case 31: 
            { System.out.println("Token temperatura encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 65: break;
          case 32: 
            { System.out.println("Token descripcion encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 66: break;
          case 33: 
            { System.out.println("Token preparacion encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 67: break;
          case 34: 
            { System.out.println("Token ingredientes encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java analex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        analex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new analex(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
