/* The following code was generated by JFlex 1.7.0 */

//* --------------------------Seccion codigo-usuario ------------------------*/ 
import java.io.*;

class Utility{

  private static final String errorMsg[] = {
    "Unmatched end of comment punctuation", 
    "Texto de ejemplo xd"
  };

  public static final int E_ENDCOMMENT = 0; 
  public static final int E_EJEMPLO = 1;


  public static void error(int code, String cadena, int line, int column) {
    System.out.println("errorMsg[code]: "+ cadena + " en la l√≠nea: "+ line + " y columna: " + column);
  }

  }

/* -----------------Seccion de opciones y declaraciones -----------------*/ 
/*--OPCIONES --*/ 
/* Nombre de la clase generada para el analizadorlexico*/ 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>./AnalizadorLexico.flex</tt>
 */
class analex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int DESCRIPCION = 4;
  public static final int IDENTIFICADOR = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\33\1\1\1\1\1\53\1\53\1\1\16\33\4\0\1\2\1\0"+
    "\1\47\1\0\1\34\5\0\1\51\2\0\1\41\1\33\1\50\1\46"+
    "\11\43\1\37\1\40\5\0\2\34\1\32\2\34\1\32\24\34\1\42"+
    "\1\0\1\52\1\0\1\34\1\0\1\7\1\15\1\5\1\16\1\14"+
    "\1\25\1\27\1\26\1\4\1\17\1\30\1\3\1\12\1\23\1\13"+
    "\1\20\1\34\1\10\1\21\1\11\1\6\1\24\3\34\1\22\1\35"+
    "\1\1\1\36\1\0\6\33\1\54\32\33\2\0\4\34\4\0\1\34"+
    "\2\0\1\33\7\0\1\34\4\0\1\31\5\0\27\34\1\0\37\34"+
    "\1\0\u01ca\34\4\0\14\34\16\0\5\34\7\0\1\34\1\0\1\34"+
    "\21\0\160\33\5\34\1\0\2\34\2\0\4\34\10\0\1\34\1\0"+
    "\3\34\1\0\1\34\1\0\24\34\1\0\123\34\1\0\213\34\1\0"+
    "\5\33\2\0\236\34\11\0\46\34\2\0\1\34\7\0\47\34\7\0"+
    "\1\34\1\0\55\33\1\0\1\33\1\0\2\33\1\0\2\33\1\0"+
    "\1\33\10\0\33\34\5\0\3\34\15\0\5\33\6\0\1\34\4\0"+
    "\13\33\5\0\53\34\25\33\12\45\4\0\2\34\1\33\143\34\1\0"+
    "\1\34\10\33\1\0\6\33\2\34\2\33\1\0\4\33\2\34\12\45"+
    "\3\34\2\0\1\34\17\0\1\33\1\34\1\33\36\34\33\33\2\0"+
    "\131\34\13\33\1\34\16\0\12\45\41\34\11\33\2\34\4\0\1\34"+
    "\5\0\26\34\4\33\1\34\11\33\1\34\3\33\1\34\5\33\22\0"+
    "\31\34\3\33\104\0\1\34\1\0\13\34\67\0\33\33\1\0\4\33"+
    "\66\34\3\33\1\34\22\33\1\34\7\33\12\34\2\33\2\0\12\45"+
    "\1\0\7\34\1\0\7\34\1\0\3\33\1\0\10\34\2\0\2\34"+
    "\2\0\26\34\1\0\7\34\1\0\1\34\3\0\4\34\2\0\1\33"+
    "\1\34\7\33\2\0\2\33\2\0\3\33\1\34\10\0\1\33\4\0"+
    "\2\34\1\0\3\34\2\33\2\0\12\45\4\34\7\0\1\34\5\0"+
    "\3\33\1\0\6\34\4\0\2\34\2\0\26\34\1\0\7\34\1\0"+
    "\2\34\1\0\2\34\1\0\2\34\2\0\1\33\1\0\5\33\4\0"+
    "\2\33\2\0\3\33\3\0\1\33\7\0\4\34\1\0\1\34\7\0"+
    "\12\45\2\33\3\34\1\33\13\0\3\33\1\0\11\34\1\0\3\34"+
    "\1\0\26\34\1\0\7\34\1\0\2\34\1\0\5\34\2\0\1\33"+
    "\1\34\10\33\1\0\3\33\1\0\3\33\2\0\1\34\17\0\2\34"+
    "\2\33\2\0\12\45\1\0\1\34\17\0\3\33\1\0\10\34\2\0"+
    "\2\34\2\0\26\34\1\0\7\34\1\0\2\34\1\0\5\34\2\0"+
    "\1\33\1\34\7\33\2\0\2\33\2\0\3\33\10\0\2\33\4\0"+
    "\2\34\1\0\3\34\2\33\2\0\12\45\1\0\1\34\20\0\1\33"+
    "\1\34\1\0\6\34\3\0\3\34\1\0\4\34\3\0\2\34\1\0"+
    "\1\34\1\0\2\34\3\0\2\34\3\0\3\34\3\0\14\34\4\0"+
    "\5\33\3\0\3\33\1\0\4\33\2\0\1\34\6\0\1\33\16\0"+
    "\12\45\11\0\1\34\7\0\3\33\1\0\10\34\1\0\3\34\1\0"+
    "\27\34\1\0\12\34\1\0\5\34\3\0\1\34\7\33\1\0\3\33"+
    "\1\0\4\33\7\0\2\33\1\0\2\34\6\0\2\34\2\33\2\0"+
    "\12\45\22\0\2\33\1\0\10\34\1\0\3\34\1\0\27\34\1\0"+
    "\12\34\1\0\5\34\2\0\1\33\1\34\7\33\1\0\3\33\1\0"+
    "\4\33\7\0\2\33\7\0\1\34\1\0\2\34\2\33\2\0\12\45"+
    "\1\0\2\34\17\0\2\33\1\0\10\34\1\0\3\34\1\0\51\34"+
    "\2\0\1\34\7\33\1\0\3\33\1\0\4\33\1\34\10\0\1\33"+
    "\10\0\2\34\2\33\2\0\12\45\12\0\6\34\2\0\2\33\1\0"+
    "\22\34\3\0\30\34\1\0\11\34\1\0\1\34\2\0\7\34\3\0"+
    "\1\33\4\0\6\33\1\0\1\33\1\0\10\33\6\0\12\44\2\0"+
    "\2\33\15\0\60\34\1\33\2\34\7\33\4\0\10\34\10\33\1\0"+
    "\12\45\47\0\2\34\1\0\1\34\2\0\2\34\1\0\1\34\2\0"+
    "\1\34\6\0\4\34\1\0\7\34\1\0\3\34\1\0\1\34\1\0"+
    "\1\34\2\0\2\34\1\0\4\34\1\33\2\34\6\33\1\0\2\33"+
    "\1\34\2\0\5\34\1\0\1\34\1\0\6\33\2\0\12\45\2\0"+
    "\4\34\40\0\1\34\27\0\2\33\6\0\12\45\13\0\1\33\1\0"+
    "\1\33\1\0\1\33\4\0\2\33\10\34\1\0\44\34\4\0\24\33"+
    "\1\0\2\33\5\34\13\33\1\0\44\33\11\0\1\33\71\0\53\34"+
    "\24\33\1\34\12\45\6\0\6\34\4\33\4\34\3\33\1\34\3\33"+
    "\2\34\7\33\3\34\4\33\15\34\14\33\1\34\1\33\12\45\4\33"+
    "\2\0\46\34\1\0\1\34\5\0\1\34\2\0\53\34\1\0\u014d\34"+
    "\1\0\4\34\2\0\7\34\1\0\1\34\1\0\4\34\2\0\51\34"+
    "\1\0\4\34\2\0\41\34\1\0\4\34\2\0\7\34\1\0\1\34"+
    "\1\0\4\34\2\0\17\34\1\0\71\34\1\0\4\34\2\0\103\34"+
    "\2\0\3\33\40\0\20\34\20\0\125\34\14\0\u026c\34\2\0\21\34"+
    "\1\0\32\34\5\0\113\34\3\0\3\34\17\0\15\34\1\0\4\34"+
    "\3\33\13\0\22\34\3\33\13\0\22\34\2\33\14\0\15\34\1\0"+
    "\3\34\1\0\2\33\14\0\64\34\40\33\3\0\1\34\3\0\2\34"+
    "\1\33\2\0\12\45\41\0\3\33\2\0\12\45\6\0\130\34\10\0"+
    "\51\34\1\33\1\34\5\0\106\34\12\0\35\34\3\0\14\33\4\0"+
    "\14\33\12\0\12\45\36\34\2\0\5\34\13\0\54\34\4\0\21\33"+
    "\7\34\2\33\6\0\12\45\46\0\27\34\5\33\4\0\65\34\12\33"+
    "\1\0\35\33\2\0\1\33\12\45\6\0\12\45\15\0\1\34\130\0"+
    "\5\33\57\34\21\33\7\34\4\0\12\45\21\0\11\33\14\0\3\33"+
    "\36\34\15\33\2\34\12\45\54\34\16\33\14\0\44\34\24\33\10\0"+
    "\12\45\3\0\3\34\12\45\44\34\122\0\3\33\1\0\25\33\4\34"+
    "\1\33\4\34\3\33\2\34\11\0\300\34\47\33\25\0\4\33\u0116\34"+
    "\2\0\6\34\2\0\46\34\2\0\6\34\2\0\10\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\37\34\2\0\65\34\1\0\7\34"+
    "\1\0\1\34\3\0\3\34\1\0\7\34\3\0\4\34\2\0\6\34"+
    "\4\0\15\34\5\0\3\34\1\0\7\34\16\0\5\33\30\0\1\53"+
    "\1\53\5\33\20\0\2\34\23\0\1\34\13\0\5\33\5\0\6\33"+
    "\1\0\1\34\15\0\1\34\20\0\15\34\3\0\33\34\25\0\15\33"+
    "\4\0\1\33\3\0\14\33\21\0\1\34\4\0\1\34\2\0\12\34"+
    "\1\0\1\34\3\0\5\34\6\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\1\0\13\34\2\0\4\34\5\0\5\34\4\0\1\34"+
    "\21\0\51\34\u0a77\0\57\34\1\0\57\34\1\0\205\34\6\0\4\34"+
    "\3\33\2\34\14\0\46\34\1\0\1\34\5\0\1\34\2\0\70\34"+
    "\7\0\1\34\17\0\1\33\27\34\11\0\7\34\1\0\7\34\1\0"+
    "\7\34\1\0\7\34\1\0\7\34\1\0\7\34\1\0\7\34\1\0"+
    "\7\34\1\0\40\33\57\0\1\34\u01d5\0\3\34\31\0\11\34\6\33"+
    "\1\0\5\34\2\0\5\34\4\0\126\34\2\0\2\33\2\0\3\34"+
    "\1\0\132\34\1\0\4\34\5\0\51\34\3\0\136\34\21\0\33\34"+
    "\65\0\20\34\u0200\0\u19b6\34\112\0\u51cd\34\63\0\u048d\34\103\0\56\34"+
    "\2\0\u010d\34\3\0\20\34\12\45\2\34\24\0\57\34\1\33\4\0"+
    "\12\33\1\0\31\34\7\0\1\33\120\34\2\33\45\0\11\34\2\0"+
    "\147\34\2\0\4\34\1\0\4\34\14\0\13\34\115\0\12\34\1\33"+
    "\3\34\1\33\4\34\1\33\27\34\5\33\20\0\1\34\7\0\64\34"+
    "\14\0\2\33\62\34\21\33\13\0\12\45\6\0\22\33\6\34\3\0"+
    "\1\34\4\0\12\45\34\34\10\33\2\0\27\34\15\33\14\0\35\34"+
    "\3\0\4\33\57\34\16\33\16\0\1\34\12\45\26\0\12\44\6\0"+
    "\51\34\16\33\11\0\3\34\1\33\10\34\2\33\2\0\12\45\6\0"+
    "\27\34\3\0\1\34\1\33\4\0\60\34\1\33\1\34\3\33\2\34"+
    "\2\33\5\34\2\33\1\34\1\33\1\34\30\0\3\34\2\0\13\34"+
    "\5\33\2\0\3\34\2\33\12\0\6\34\2\0\6\34\2\0\6\34"+
    "\11\0\7\34\1\0\7\34\221\0\43\34\10\33\1\0\2\33\2\0"+
    "\12\45\6\0\u2ba4\34\14\0\27\34\4\0\61\34\u2104\0\u016e\34\2\0"+
    "\152\34\46\0\7\34\14\0\5\34\5\0\1\34\1\33\12\34\1\0"+
    "\15\34\1\0\5\34\1\0\1\34\1\0\2\34\1\0\2\34\1\0"+
    "\154\34\41\0\u016b\34\22\0\100\34\2\0\66\34\50\0\15\34\3\0"+
    "\20\33\20\0\7\33\14\0\2\34\30\0\3\34\31\0\1\34\6\0"+
    "\5\34\1\0\207\34\2\0\1\33\4\0\1\34\13\0\12\45\7\0"+
    "\32\34\4\0\1\34\1\0\32\34\13\0\131\34\3\0\6\34\2\0"+
    "\6\34\2\0\6\34\2\0\3\34\3\0\2\34\3\0\2\34\22\0"+
    "\3\33\4\0\14\34\1\0\32\34\1\0\23\34\1\0\2\34\1\0"+
    "\17\34\2\0\16\34\42\0\173\34\105\0\65\34\210\0\1\33\202\0"+
    "\35\34\3\0\61\34\57\0\37\34\21\0\33\34\65\0\36\34\2\0"+
    "\44\34\4\0\10\34\1\0\5\34\52\0\236\34\2\0\12\45\u0356\0"+
    "\6\34\2\0\1\34\1\0\54\34\1\0\2\34\3\0\1\34\2\0"+
    "\27\34\252\0\26\34\12\0\32\34\106\0\70\34\6\0\2\34\100\0"+
    "\1\34\3\33\1\0\2\33\5\0\4\33\4\34\1\0\3\34\1\0"+
    "\33\34\4\0\3\33\4\0\1\33\40\0\35\34\203\0\66\34\12\0"+
    "\26\34\12\0\23\34\215\0\111\34\u03b7\0\3\33\65\34\17\33\37\0"+
    "\12\45\20\0\3\33\55\34\13\33\2\0\1\33\22\0\31\34\7\0"+
    "\12\45\6\0\3\33\44\34\16\33\1\0\12\45\100\0\3\33\60\34"+
    "\16\33\4\34\13\0\12\45\u0116\0\12\44\u0156\0\12\44\166\0\12\44"+
    "\u0176\0\12\44\46\0\53\34\15\33\10\0\12\45\146\0\12\44\u01a6\0"+
    "\12\44\u0366\0\12\44\u03a6\0\u036f\34\221\0\143\34\u0b9d\0\u042f\34\u33d1\0"+
    "\u0239\34\47\0\12\44\346\0\12\44\u03a6\0\105\34\13\0\1\34\56\33"+
    "\20\0\4\33\15\34\u4060\0\2\34\u2163\0\5\33\3\0\26\33\2\0"+
    "\7\33\36\0\4\33\224\0\3\33\u01bb\0\125\34\1\0\107\34\1\0"+
    "\2\34\2\0\1\34\2\0\2\34\2\0\4\34\1\0\14\34\1\0"+
    "\1\34\1\0\7\34\1\0\101\34\1\0\4\34\2\0\10\34\1\0"+
    "\7\34\1\0\34\34\1\0\4\34\1\0\5\34\1\0\1\34\3\0"+
    "\7\34\1\0\u0154\34\2\0\31\34\1\0\31\34\1\0\37\34\1\0"+
    "\31\34\1\0\37\34\1\0\31\34\1\0\37\34\1\0\31\34\1\0"+
    "\37\34\1\0\31\34\1\0\10\34\2\0\62\45\u1150\0\12\44\u04a6\0"+
    "\4\34\1\0\33\34\1\0\2\34\1\0\1\34\2\0\1\34\1\0"+
    "\12\34\1\0\4\34\1\0\1\34\1\0\1\34\6\0\1\34\4\0"+
    "\1\34\1\0\1\34\1\0\1\34\1\0\3\34\1\0\2\34\1\0"+
    "\1\34\2\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34\1\0"+
    "\1\34\1\0\2\34\1\0\1\34\2\0\4\34\1\0\7\34\1\0"+
    "\4\34\1\0\4\34\1\0\1\34\1\0\12\34\1\0\21\34\5\0"+
    "\3\34\1\0\5\34\1\0\21\34\u1144\0\ua6d7\34\51\0\u1035\34\13\0"+
    "\336\34\u3fe2\0\u021e\34\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\33\36\0\140\33\200\0\360\33\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\0\1\2\1\3\1\4\16\2\1\5"+
    "\1\4\2\2\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\2\1\17\1\20\1\17\1\1"+
    "\1\21\1\22\1\23\3\0\1\4\25\0\1\24\1\25"+
    "\12\0\1\5\51\0\1\26\1\0\1\27\3\0\1\30"+
    "\1\0\1\31\5\0\1\32\1\33\4\0\1\34\1\0"+
    "\1\35\23\0\1\36\7\0\1\37\1\40\1\41\1\42"+
    "\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\264\0\341\0\u010e"+
    "\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de"+
    "\0\u040b\0\264\0\264\0\264\0\264\0\264\0\264\0\u0438"+
    "\0\u0465\0\264\0\u0492\0\264\0\264\0\u04bf\0\u04ec\0\264"+
    "\0\u0519\0\264\0\u0546\0\u0573\0\u05a0\0\264\0\u05cd\0\u05fa"+
    "\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762"+
    "\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca"+
    "\0\u08f7\0\u0924\0\u0951\0\264\0\264\0\u097e\0\u09ab\0\u09d8"+
    "\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\264"+
    "\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b"+
    "\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3"+
    "\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b"+
    "\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3"+
    "\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b"+
    "\0\u1248\0\264\0\u1275\0\264\0\u12a2\0\u12cf\0\u12fc\0\264"+
    "\0\u1329\0\264\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\264"+
    "\0\264\0\u1437\0\u1464\0\u1491\0\u14be\0\264\0\u14eb\0\264"+
    "\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653"+
    "\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb"+
    "\0\u17e8\0\u1815\0\u1842\0\264\0\u186f\0\u189c\0\u18c9\0\u18f6"+
    "\0\u1923\0\u1950\0\u197d\0\264\0\264\0\264\0\264\0\u19aa"+
    "\0\u19d7\0\u1a04";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\5\1\17\1\20\1\21\1\5\1\22"+
    "\1\23\1\5\1\24\1\25\1\5\1\26\1\27\1\30"+
    "\1\31\3\5\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\2\5\1\41\1\42\1\43\4\5\1\44\2\45"+
    "\46\44\1\46\1\44\3\5\34\47\6\5\1\47\1\5"+
    "\2\47\3\5\1\50\1\5\1\47\2\5\31\51\1\5"+
    "\1\51\12\5\1\52\5\5\61\0\1\53\73\0\1\54"+
    "\44\0\1\55\57\0\1\56\50\0\1\57\56\0\1\60"+
    "\44\0\1\61\3\0\1\62\2\0\1\63\1\64\43\0"+
    "\1\56\1\65\6\0\1\66\1\67\12\0\1\56\46\0"+
    "\1\70\42\0\1\71\61\0\1\72\47\0\1\73\1\74"+
    "\3\0\1\75\53\0\1\76\1\77\53\0\1\100\55\0"+
    "\1\101\54\0\1\102\46\0\1\103\75\0\1\56\57\0"+
    "\1\104\65\0\4\40\51\0\1\41\62\0\1\105\53\0"+
    "\1\50\5\0\34\47\6\0\1\47\1\0\2\47\5\0"+
    "\1\47\2\0\31\51\1\0\1\51\25\0\1\106\76\0"+
    "\1\107\32\0\1\110\56\0\1\111\52\0\1\112\63\0"+
    "\1\113\44\0\1\114\6\0\1\115\52\0\1\116\55\0"+
    "\1\117\65\0\1\120\34\0\1\121\73\0\1\122\37\0"+
    "\1\123\60\0\1\124\62\0\1\125\1\0\1\126\54\0"+
    "\1\127\47\0\1\130\43\0\1\131\76\0\1\132\56\0"+
    "\1\120\37\0\1\133\45\0\1\134\61\0\1\135\50\0"+
    "\1\136\56\0\1\137\56\0\1\140\50\0\1\141\71\0"+
    "\1\137\47\0\1\142\52\0\1\143\53\0\1\144\50\0"+
    "\1\145\56\0\1\146\65\0\1\147\50\0\1\150\45\0"+
    "\1\151\56\0\1\152\51\0\1\150\57\0\1\153\52\0"+
    "\1\154\62\0\1\155\61\0\1\156\43\0\1\157\55\0"+
    "\1\160\61\0\1\161\52\0\1\162\65\0\1\163\51\0"+
    "\1\164\42\0\1\150\61\0\1\165\63\0\1\166\42\0"+
    "\1\167\63\0\1\170\42\0\1\171\62\0\1\131\43\0"+
    "\1\172\65\0\1\173\50\0\1\174\47\0\1\137\54\0"+
    "\1\175\61\0\1\176\54\0\1\177\65\0\1\200\42\0"+
    "\1\201\55\0\1\202\60\0\1\163\50\0\1\203\51\0"+
    "\1\204\53\0\1\205\57\0\1\205\63\0\1\206\45\0"+
    "\1\207\54\0\1\210\60\0\1\211\51\0\1\137\54\0"+
    "\1\212\71\0\1\164\37\0\1\213\50\0\1\214\60\0"+
    "\1\215\60\0\1\216\44\0\1\217\60\0\1\220\50\0"+
    "\1\221\60\0\1\222\53\0\1\223\61\0\1\224\60\0"+
    "\1\225\43\0\1\226\63\0\1\227\52\0\1\230\42\0"+
    "\1\231\63\0\1\232\63\0\1\233\41\0\1\234\54\0"+
    "\1\235\56\0\1\236\70\0\1\237\40\0\1\240\53\0"+
    "\1\241\61\0\1\111\45\0\1\242\54\0\1\243\66\0"+
    "\1\244\47\0\1\245\46\0\1\246\61\0\1\247\57\0"+
    "\1\250\54\0\1\251\55\0\1\252\42\0\1\253\61\0"+
    "\1\254\70\0\1\255\54\0\1\256\52\0\1\257\57\0"+
    "\1\260\37\0\1\261\65\0\1\262\47\0\1\205\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6705];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\0\2\11\23\1\6\11\2\1\1\11"+
    "\1\1\2\11\2\1\1\11\1\1\1\11\3\0\1\11"+
    "\25\0\2\11\12\0\1\11\51\0\1\11\1\0\1\11"+
    "\3\0\1\11\1\0\1\11\5\0\2\11\4\0\1\11"+
    "\1\0\1\11\23\0\1\11\7\0\4\11\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  analex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2906) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Token cadena <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 35: break;
          case 2: 
            { System.out.print(yytext());
            } 
            // fall through
          case 36: break;
          case 3: 
            { 
            } 
            // fall through
          case 37: break;
          case 4: 
            { System.out.println("Token unidad_cantidad <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 38: break;
          case 5: 
            { System.out.println("Token unidad_tiempo <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 39: break;
          case 6: 
            { System.out.println("Token { encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 40: break;
          case 7: 
            { System.out.println("Token } encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 41: break;
          case 8: 
            { System.out.println("Token ':' encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 42: break;
          case 9: 
            { System.out.println("Token ';' encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 43: break;
          case 10: 
            { System.out.println("Token '-' encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 44: break;
          case 11: 
            { System.out.println("Token '[' encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
    yybegin(DESCRIPCION);
            } 
            // fall through
          case 45: break;
          case 12: 
            { System.out.println("Token numero <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 46: break;
          case 13: 
            { System.out.println("Token digito_velocidad <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 47: break;
          case 14: 
            { System.out.println("Token comilla encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
 yybegin(IDENTIFICADOR);
            } 
            // fall through
          case 48: break;
          case 15: 
            { /*Ignoramos el contenido de los comentarios*/
            } 
            // fall through
          case 49: break;
          case 16: 
            { /*Ignoramos los saltos de l√≠nea de los comentarios*/
            } 
            // fall through
          case 50: break;
          case 17: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 51: break;
          case 18: 
            { System.out.println("Token IDENT <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 52: break;
          case 19: 
            { System.out.println("Token comilla <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
    yybegin(YYINITIAL);
            } 
            // fall through
          case 53: break;
          case 20: 
            { System.out.println("Token unidad_temperatura <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 54: break;
          case 21: 
            { yybegin(COMENTARIO); System.out.println("Token Comentario encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 55: break;
          case 22: 
            { System.out.println("Token total encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 56: break;
          case 23: 
            { System.out.println("Token verbo_mov <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 57: break;
          case 24: 
            { System.out.println("Token pasos encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 58: break;
          case 25: 
            { System.out.println("Token verbo_per <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 59: break;
          case 26: 
            { System.out.println("Token receta encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 60: break;
          case 27: 
            { System.out.println("Token tiempo encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 61: break;
          case 28: 
            { System.out.println("Token nombre encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 62: break;
          case 29: 
            { System.out.println("Token verbo_coc <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 63: break;
          case 30: 
            { System.out.println("Token velocidad encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 64: break;
          case 31: 
            { System.out.println("Token temperatura encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 65: break;
          case 32: 
            { System.out.println("Token descripcion encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 66: break;
          case 33: 
            { System.out.println("Token preparacion encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 67: break;
          case 34: 
            { System.out.println("Token ingredientes encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java analex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        analex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new analex(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
