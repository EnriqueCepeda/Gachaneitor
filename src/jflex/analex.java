// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: C:/GIT/Gachaneitor/src/jflex/AnalizadorLexico.flex

//* --------------------------Seccion codigo-usuario ------------------------*/ 
import java.io.*;

class Utility{

  private static final String errorMsg[] = {
    "Unmatched end of comment punctuation", 
    "Texto de ejemplo xd"
  };

  public static final int E_ENDCOMMENT = 0; 
  public static final int E_EJEMPLO = 1;


  public static void error(int code, String cadena, int line, int column) {
    System.out.println("errorMsg[code]: "+ cadena + " en la l√≠nea: "+ line + " y columna: " + column);
  }

  }

/* -----------------Seccion de opciones y declaraciones -----------------*/ 
/*--OPCIONES --*/ 
/* Nombre de la clase generada para el analizadorlexico*/ 


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class analex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int DESCRIPCION = 4;
  public static final int IDENTIFICADOR = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\2\2\1\1\16\0\4\3\1\4\1\3"+
    "\1\5\1\3\1\6\5\3\1\7\2\3\1\10\1\0"+
    "\1\11\1\12\11\13\1\14\1\15\5\3\2\6\1\16"+
    "\2\6\1\16\24\6\1\17\1\3\1\20\1\3\1\6"+
    "\1\3\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\6\1\41\1\42\1\43\1\44\1\45\3\6"+
    "\1\46\1\47\1\1\1\50\1\3\6\0\1\51\32\0"+
    "\2\3\4\6\4\3\1\6\2\3\1\0\7\3\1\6"+
    "\4\3\1\52\5\3\2\6\1\53\24\6\1\3\37\6"+
    "\1\3\u01ca\6\4\3\14\6\16\3\5\6\7\3\1\6"+
    "\1\3\1\6\21\3\160\0\5\6\1\3\2\6\2\3"+
    "\4\6\1\3\1\6\6\3\1\6\1\3\3\6\1\3"+
    "\1\6\1\3\24\6\1\3\123\6\1\3\213\6\1\3"+
    "\5\0\2\3\246\6\1\3\46\6\2\3\1\6\6\3"+
    "\51\6\6\3\1\6\1\3\55\0\1\3\1\0\1\3"+
    "\2\0\1\3\2\0\1\3\1\0\10\3\33\6\4\3"+
    "\4\6\15\3\6\0\5\3\1\6\4\3\13\0\1\3"+
    "\1\0\3\3\53\6\25\0\12\54\4\3\2\6\1\0"+
    "\143\6\1\3\1\6\10\0\1\3\6\0\2\6\2\0"+
    "\1\3\4\0\2\6\12\54\3\6\2\3\1\6\17\3"+
    "\1\0\1\6\1\0\36\6\33\0\2\3\131\6\13\0"+
    "\1\6\16\3\12\54\41\6\11\0\2\6\4\3\1\6"+
    "\2\3\1\0\30\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\5\0\22\3\31\6\3\0\4\3\13\6\65\3"+
    "\25\6\1\3\22\6\13\3\61\0\66\6\3\0\1\6"+
    "\22\0\1\6\7\0\12\6\2\0\2\3\12\54\1\3"+
    "\20\6\3\0\1\3\10\6\2\3\2\6\2\3\26\6"+
    "\1\3\7\6\1\3\1\6\3\3\4\6\2\3\1\0"+
    "\1\6\7\0\2\3\2\0\2\3\3\0\1\6\10\3"+
    "\1\0\4\3\2\6\1\3\3\6\2\0\2\3\12\54"+
    "\4\6\7\3\2\6\1\3\1\0\2\3\3\0\1\3"+
    "\6\6\4\3\2\6\2\3\26\6\1\3\7\6\1\3"+
    "\2\6\1\3\2\6\1\3\2\6\2\3\1\0\1\3"+
    "\5\0\4\3\2\0\2\3\3\0\3\3\1\0\7\3"+
    "\4\6\1\3\1\6\7\3\12\54\2\0\3\6\1\0"+
    "\13\3\3\0\1\3\11\6\1\3\3\6\1\3\26\6"+
    "\1\3\7\6\1\3\2\6\1\3\5\6\2\3\1\0"+
    "\1\6\10\0\1\3\3\0\1\3\3\0\2\3\1\6"+
    "\17\3\2\6\2\0\2\3\12\54\1\3\1\6\7\3"+
    "\1\6\6\0\1\3\3\0\1\3\10\6\2\3\2\6"+
    "\2\3\26\6\1\3\7\6\1\3\2\6\1\3\5\6"+
    "\2\3\1\0\1\6\7\0\2\3\2\0\2\3\3\0"+
    "\7\3\3\0\4\3\2\6\1\3\3\6\2\0\2\3"+
    "\12\54\1\3\1\6\20\3\1\0\1\6\1\3\6\6"+
    "\3\3\3\6\1\3\4\6\3\3\2\6\1\3\1\6"+
    "\1\3\2\6\3\3\2\6\3\3\3\6\3\3\14\6"+
    "\4\3\5\0\3\3\3\0\1\3\4\0\2\3\1\6"+
    "\6\3\1\0\16\3\12\54\11\3\1\6\6\3\5\0"+
    "\10\6\1\3\3\6\1\3\27\6\1\3\20\6\3\3"+
    "\1\6\7\0\1\3\3\0\1\3\4\0\7\3\2\0"+
    "\1\3\3\6\5\3\2\6\2\0\2\3\12\54\20\3"+
    "\1\6\3\0\1\3\10\6\1\3\3\6\1\3\27\6"+
    "\1\3\12\6\1\3\5\6\2\3\1\0\1\6\7\0"+
    "\1\3\3\0\1\3\4\0\7\3\2\0\7\3\1\6"+
    "\1\3\2\6\2\0\2\3\12\54\1\3\2\6\15\3"+
    "\4\0\11\6\1\3\3\6\1\3\51\6\2\0\1\6"+
    "\7\0\1\3\3\0\1\3\4\0\1\6\5\3\3\6"+
    "\1\0\7\3\3\6\2\0\2\3\12\54\12\3\6\6"+
    "\1\3\3\0\1\3\22\6\3\3\30\6\1\3\11\6"+
    "\1\3\1\6\2\3\7\6\3\3\1\0\4\3\6\0"+
    "\1\3\1\0\1\3\10\0\6\3\12\54\2\3\2\0"+
    "\15\3\60\6\1\0\2\6\7\0\4\3\10\6\10\0"+
    "\1\3\12\54\47\3\2\6\1\3\1\6\1\3\5\6"+
    "\1\3\30\6\1\3\1\6\1\3\12\6\1\0\2\6"+
    "\11\0\1\6\2\3\5\6\1\3\1\6\1\3\6\0"+
    "\2\3\12\54\2\3\4\6\40\3\1\6\27\3\2\0"+
    "\6\3\12\54\13\3\1\0\1\3\1\0\1\3\1\0"+
    "\4\3\2\0\10\6\1\3\44\6\4\3\24\0\1\3"+
    "\2\0\5\6\13\0\1\3\44\0\11\3\1\0\71\3"+
    "\53\6\24\0\1\6\12\54\6\3\6\6\4\0\4\6"+
    "\3\0\1\6\3\0\2\6\7\0\3\6\4\0\15\6"+
    "\14\0\1\6\1\0\12\54\4\0\2\3\46\6\1\3"+
    "\1\6\5\3\1\6\2\3\53\6\1\3\115\6\1\3"+
    "\4\6\2\3\7\6\1\3\1\6\1\3\4\6\2\3"+
    "\51\6\1\3\4\6\2\3\41\6\1\3\4\6\2\3"+
    "\7\6\1\3\1\6\1\3\4\6\2\3\17\6\1\3"+
    "\71\6\1\3\4\6\2\3\103\6\2\3\3\0\40\3"+
    "\20\6\20\3\126\6\2\3\6\6\3\3\u016c\6\2\3"+
    "\21\6\1\3\32\6\5\3\113\6\3\3\13\6\7\3"+
    "\15\6\1\3\4\6\3\0\13\3\22\6\3\0\13\3"+
    "\22\6\2\0\14\3\15\6\1\3\3\6\1\3\2\0"+
    "\14\3\64\6\40\0\3\3\1\6\3\3\2\6\1\0"+
    "\2\3\12\54\41\3\4\0\1\3\12\54\6\3\131\6"+
    "\7\3\5\6\2\0\42\6\1\0\1\6\5\3\106\6"+
    "\12\3\37\6\1\3\14\0\4\3\14\0\12\3\12\54"+
    "\36\6\2\3\5\6\13\3\54\6\4\3\32\6\6\3"+
    "\12\54\46\3\27\6\5\0\4\3\65\6\12\0\1\3"+
    "\35\0\2\3\1\0\12\54\6\3\12\54\15\3\1\6"+
    "\10\3\16\0\1\3\2\0\77\3\5\0\57\6\21\0"+
    "\7\6\4\3\12\54\21\3\11\0\14\3\3\0\36\6"+
    "\15\0\2\6\12\54\54\6\16\0\14\3\44\6\24\0"+
    "\10\3\12\54\3\3\3\6\12\54\44\6\2\3\11\6"+
    "\7\3\53\6\2\3\3\6\20\3\3\0\1\3\25\0"+
    "\4\6\1\0\6\6\1\0\2\6\3\0\1\6\5\3"+
    "\300\6\72\0\1\3\5\0\26\6\2\3\6\6\2\3"+
    "\46\6\2\3\6\6\2\3\10\6\1\3\1\6\1\3"+
    "\1\6\1\3\1\6\1\3\37\6\2\3\65\6\1\3"+
    "\7\6\1\3\1\6\3\3\3\6\1\3\7\6\3\3"+
    "\4\6\2\3\6\6\4\3\15\6\5\3\3\6\1\3"+
    "\7\6\16\3\5\0\30\3\2\2\5\0\20\3\2\6"+
    "\23\3\1\6\13\3\5\0\1\3\12\0\1\3\1\6"+
    "\15\3\1\6\20\3\15\6\3\3\40\6\20\3\15\0"+
    "\4\3\1\0\3\3\14\0\21\3\1\6\4\3\1\6"+
    "\2\3\12\6\1\3\1\6\3\3\5\6\6\3\1\6"+
    "\1\3\1\6\1\3\1\6\1\3\4\6\1\3\13\6"+
    "\2\3\4\6\5\3\5\6\4\3\1\6\21\3\51\6"+
    "\u0177\3\57\6\1\3\57\6\1\3\205\6\6\3\4\6"+
    "\3\0\2\6\14\3\46\6\1\3\1\6\5\3\1\6"+
    "\2\3\70\6\7\3\1\6\17\3\1\0\27\6\11\3"+
    "\7\6\1\3\7\6\1\3\7\6\1\3\7\6\1\3"+
    "\7\6\1\3\7\6\1\3\7\6\1\3\7\6\1\3"+
    "\40\0\57\3\1\6\325\3\3\6\31\3\11\6\6\0"+
    "\1\3\5\6\2\3\5\6\4\3\126\6\2\3\2\0"+
    "\2\3\3\6\1\3\132\6\1\3\4\6\5\3\53\6"+
    "\1\3\136\6\21\3\40\6\60\3\320\6\100\3\375\6"+
    "\3\3\215\6\103\3\56\6\2\3\15\6\3\3\20\6"+
    "\12\54\2\6\24\3\57\6\1\0\4\3\12\0\1\3"+
    "\37\6\2\0\120\6\2\0\45\3\11\6\2\3\147\6"+
    "\2\3\65\6\2\3\11\6\52\3\15\6\1\0\3\6"+
    "\1\0\4\6\1\0\27\6\5\0\4\3\1\0\13\3"+
    "\1\6\7\3\64\6\14\3\2\0\62\6\22\0\12\3"+
    "\12\54\6\3\22\0\6\6\3\3\1\6\1\3\2\6"+
    "\1\0\12\54\34\6\10\0\2\3\27\6\15\0\14\3"+
    "\35\6\3\3\4\0\57\6\16\0\16\3\1\6\12\54"+
    "\6\3\5\6\1\0\12\6\12\54\5\6\1\3\51\6"+
    "\16\0\11\3\3\6\1\0\10\6\2\0\2\3\12\54"+
    "\6\3\27\6\3\3\1\6\3\0\62\6\1\0\1\6"+
    "\3\0\2\6\2\0\5\6\2\0\1\6\1\0\1\6"+
    "\30\3\3\6\2\3\13\6\5\0\2\3\3\6\2\0"+
    "\12\3\6\6\2\3\6\6\2\3\6\6\11\3\7\6"+
    "\1\3\7\6\1\3\53\6\1\3\16\6\6\3\163\6"+
    "\10\0\1\3\2\0\2\3\12\54\6\3\244\6\14\3"+
    "\27\6\4\3\61\6\4\3\u0100\2\156\6\2\3\152\6"+
    "\46\3\7\6\14\3\5\6\5\3\1\6\1\0\12\6"+
    "\1\3\15\6\1\3\5\6\1\3\1\6\1\3\2\6"+
    "\1\3\2\6\1\3\154\6\41\3\153\6\22\3\100\6"+
    "\2\3\66\6\50\3\15\6\3\3\20\0\20\3\20\0"+
    "\3\3\2\6\30\3\3\6\31\3\1\6\6\3\5\6"+
    "\1\3\207\6\2\3\1\0\4\3\1\6\13\3\12\54"+
    "\7\3\32\6\4\3\1\6\1\3\32\6\13\3\131\6"+
    "\3\3\6\6\2\3\6\6\2\3\6\6\2\3\3\6"+
    "\3\3\2\6\3\3\2\6\22\3\3\0\4\3\14\6"+
    "\1\3\32\6\1\3\23\6\1\3\2\6\1\3\17\6"+
    "\2\3\16\6\42\3\173\6\105\3\65\6\210\3\1\0"+
    "\202\3\35\6\3\3\61\6\17\3\1\0\37\3\40\6"+
    "\15\3\36\6\5\3\46\6\5\0\5\3\36\6\2\3"+
    "\44\6\4\3\10\6\1\3\5\6\52\3\236\6\2\3"+
    "\12\54\6\3\44\6\4\3\44\6\4\3\50\6\10\3"+
    "\64\6\234\3\67\6\11\3\26\6\12\3\10\6\230\3"+
    "\6\6\2\3\1\6\1\3\54\6\1\3\2\6\3\3"+
    "\1\6\2\3\27\6\12\3\27\6\11\3\37\6\101\3"+
    "\23\6\1\3\2\6\12\3\26\6\12\3\32\6\106\3"+
    "\70\6\6\3\2\6\100\3\1\6\3\0\1\3\2\0"+
    "\5\3\4\0\4\6\1\3\3\6\1\3\35\6\2\3"+
    "\3\0\4\3\1\0\40\3\35\6\3\3\35\6\43\3"+
    "\10\6\1\3\34\6\2\0\31\3\66\6\12\3\26\6"+
    "\12\3\23\6\15\3\22\6\156\3\111\6\67\3\63\6"+
    "\15\3\63\6\15\3\44\6\4\0\10\3\12\54\u0146\3"+
    "\52\6\1\3\2\0\3\3\2\6\116\3\35\6\12\3"+
    "\1\6\10\3\26\6\13\0\137\3\25\6\33\3\27\6"+
    "\11\3\3\0\65\6\17\0\37\3\12\54\17\3\4\0"+
    "\55\6\13\0\2\3\1\0\17\3\1\0\2\3\31\6"+
    "\7\3\12\54\6\3\3\0\44\6\16\0\1\3\12\54"+
    "\4\3\1\6\2\0\1\6\10\3\43\6\1\0\2\3"+
    "\1\6\11\3\3\0\60\6\16\0\4\6\4\3\4\0"+
    "\1\3\2\0\12\54\1\6\1\3\1\6\43\3\22\6"+
    "\1\3\31\6\14\0\6\3\1\0\101\3\7\6\1\3"+
    "\1\6\1\3\4\6\1\3\17\6\1\3\12\6\7\3"+
    "\57\6\14\0\5\3\12\54\6\3\4\0\1\3\10\6"+
    "\2\3\2\6\2\3\26\6\1\3\7\6\1\3\2\6"+
    "\1\3\5\6\1\3\2\0\1\6\7\0\2\3\2\0"+
    "\2\3\3\0\2\3\1\6\6\3\1\0\5\3\5\6"+
    "\2\0\2\3\7\0\3\3\5\0\213\3\65\6\22\0"+
    "\4\6\5\3\12\54\4\3\1\0\3\6\36\3\60\6"+
    "\24\0\2\6\1\3\1\6\10\3\12\54\246\3\57\6"+
    "\7\0\2\3\11\0\27\3\4\6\2\0\42\3\60\6"+
    "\21\0\3\3\1\6\13\3\12\54\46\3\53\6\15\0"+
    "\1\6\7\3\12\54\66\3\33\6\2\3\17\0\4\3"+
    "\12\54\306\3\54\6\17\0\145\3\100\6\12\54\25\3"+
    "\10\6\2\3\1\6\2\3\10\6\1\3\2\6\1\3"+
    "\30\6\6\0\1\3\2\0\2\3\4\0\1\6\1\0"+
    "\1\6\2\0\14\3\12\0\106\3\10\6\2\3\47\6"+
    "\7\0\2\3\7\0\1\6\1\3\1\6\1\0\33\3"+
    "\1\6\12\0\50\6\7\0\1\6\4\0\10\3\1\0"+
    "\10\3\1\6\13\0\56\6\20\0\3\3\1\6\42\3"+
    "\71\6\7\3\11\6\1\3\45\6\10\0\1\3\10\0"+
    "\1\6\17\3\12\54\30\3\36\6\2\3\26\0\1\3"+
    "\16\0\111\3\7\6\1\3\2\6\1\3\46\6\6\0"+
    "\3\3\1\0\1\3\2\0\1\3\7\0\1\6\1\0"+
    "\10\3\12\54\6\3\6\6\1\3\2\6\1\3\40\6"+
    "\5\0\1\3\2\0\1\3\5\0\1\6\7\3\12\54"+
    "\u0136\3\23\6\4\0\271\3\1\6\54\3\4\6\37\3"+
    "\232\6\146\3\157\6\21\3\304\6\274\3\57\6\1\3"+
    "\11\0\307\3\107\6\271\3\71\6\7\3\37\6\1\3"+
    "\12\54\146\3\36\6\2\3\5\0\13\3\60\6\7\0"+
    "\11\3\4\6\14\3\12\54\11\3\25\6\5\3\23\6"+
    "\260\3\100\6\200\3\113\6\4\3\1\0\1\6\67\0"+
    "\7\3\4\0\15\6\100\3\2\6\1\3\1\6\1\0"+
    "\13\3\2\0\16\3\370\6\10\3\326\6\52\3\11\6"+
    "\367\3\37\6\61\3\3\6\21\3\4\6\10\3\u018c\6"+
    "\4\3\153\6\5\3\15\6\3\3\11\6\7\3\12\6"+
    "\3\3\2\0\1\3\4\0\301\3\5\0\3\3\26\0"+
    "\2\3\7\0\36\3\4\0\224\3\3\0\273\3\125\6"+
    "\1\3\107\6\1\3\2\6\2\3\1\6\2\3\2\6"+
    "\2\3\4\6\1\3\14\6\1\3\1\6\1\3\7\6"+
    "\1\3\101\6\1\3\4\6\2\3\10\6\1\3\7\6"+
    "\1\3\34\6\1\3\4\6\1\3\5\6\1\3\1\6"+
    "\3\3\7\6\1\3\u0154\6\2\3\31\6\1\3\31\6"+
    "\1\3\37\6\1\3\31\6\1\3\37\6\1\3\31\6"+
    "\1\3\37\6\1\3\31\6\1\3\37\6\1\3\31\6"+
    "\1\3\10\6\2\3\62\54\67\0\4\3\62\0\10\3"+
    "\1\0\16\3\1\0\26\3\5\0\1\3\17\0\120\3"+
    "\7\0\1\3\21\0\2\3\7\0\1\3\2\0\1\3"+
    "\5\0\325\3\55\6\3\3\7\0\7\6\2\3\12\54"+
    "\4\3\1\6\u0171\3\54\6\4\0\12\54\5\3\306\6"+
    "\13\3\7\0\51\3\104\6\7\0\1\6\4\3\12\54"+
    "\u0156\3\1\6\117\3\4\6\1\3\33\6\1\3\2\6"+
    "\1\3\1\6\2\3\1\6\1\3\12\6\1\3\4\6"+
    "\1\3\1\6\1\3\1\6\6\3\1\6\4\3\1\6"+
    "\1\3\1\6\1\3\1\6\1\3\3\6\1\3\2\6"+
    "\1\3\1\6\2\3\1\6\1\3\1\6\1\3\1\6"+
    "\1\3\1\6\1\3\1\6\1\3\2\6\1\3\1\6"+
    "\2\3\4\6\1\3\7\6\1\3\4\6\1\3\4\6"+
    "\1\3\1\6\1\3\12\6\1\3\21\6\5\3\3\6"+
    "\1\3\5\6\1\3\21\6\u0134\3\12\0\6\3\336\6"+
    "\42\3\65\6\13\3\336\6\2\3\u0182\6\16\3\u0131\6"+
    "\37\3\36\6\342\3\113\6\266\3\1\0\36\3\140\0"+
    "\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\0\1\2\1\3\1\4\1\5\1\2"+
    "\1\6\1\7\1\10\1\11\1\12\5\2\1\13\1\14"+
    "\2\2\1\13\10\2\1\15\1\16\1\2\1\17\1\20"+
    "\1\17\1\1\1\21\1\22\1\23\1\24\10\0\1\13"+
    "\34\0\1\14\15\0\1\25\26\0\1\26\7\0\1\27"+
    "\1\30\4\0\1\31\5\0\1\32\1\0\1\33\1\0"+
    "\1\34\1\0\1\35\24\0\1\36\6\0\1\37\1\0"+
    "\1\40\1\41\1\0\1\42\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\264\0\264\0\264"+
    "\0\341\0\u010e\0\u013b\0\264\0\264\0\264\0\u0168\0\u0195"+
    "\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd"+
    "\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b\0\u0438\0\u0465"+
    "\0\264\0\264\0\u0492\0\264\0\264\0\u04bf\0\u04ec\0\264"+
    "\0\u0519\0\264\0\264\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa"+
    "\0\u0627\0\u0654\0\u0681\0\264\0\u06ae\0\u06db\0\u0708\0\u0735"+
    "\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d"+
    "\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05"+
    "\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d"+
    "\0\264\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8"+
    "\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\264\0\u0de3"+
    "\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b"+
    "\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3"+
    "\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\264\0\u11c1\0\u11ee"+
    "\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\264\0\264\0\u12fc"+
    "\0\u1329\0\u1356\0\u1383\0\264\0\u13b0\0\u13dd\0\u140a\0\u1437"+
    "\0\u1464\0\264\0\u1491\0\264\0\u14be\0\264\0\u14eb\0\264"+
    "\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653"+
    "\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb"+
    "\0\u17e8\0\u1815\0\u1842\0\u186f\0\264\0\u189c\0\u18c9\0\u18f6"+
    "\0\u1923\0\u1950\0\u197d\0\264\0\u19aa\0\264\0\264\0\u19d7"+
    "\0\264\0\u1a04\0\u1a31";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\5\1\6\1\7\2\5\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\5\1\16\1\5\1\17"+
    "\1\20\1\21\1\22\1\23\1\5\1\24\1\25\1\26"+
    "\1\5\1\27\1\30\1\31\1\32\1\5\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\5\1\41\1\42\2\5"+
    "\1\43\1\5\1\44\1\45\1\5\1\44\1\45\2\44"+
    "\1\46\41\44\1\5\3\44\2\47\2\5\1\47\1\5"+
    "\1\47\3\5\2\47\2\5\1\47\1\5\1\50\26\47"+
    "\2\5\4\47\4\5\1\51\1\52\1\51\7\5\1\51"+
    "\2\5\26\51\3\5\2\51\1\5\64\0\1\53\60\0"+
    "\1\12\53\0\2\13\40\0\1\13\35\0\1\54\40\0"+
    "\1\55\72\0\1\56\42\0\1\57\71\0\1\60\56\0"+
    "\1\61\35\0\1\62\65\0\1\63\45\0\1\64\56\0"+
    "\1\65\50\0\1\66\1\0\1\64\1\0\1\67\2\0"+
    "\1\64\2\0\1\70\54\0\1\71\36\0\1\72\3\0"+
    "\1\73\13\0\1\74\40\0\1\75\54\0\1\76\11\0"+
    "\1\77\42\0\1\100\3\0\1\101\5\0\1\102\1\0"+
    "\1\103\37\0\1\64\55\0\1\104\101\0\1\105\13\0"+
    "\1\50\43\0\2\47\2\0\1\47\1\0\1\47\3\0"+
    "\2\47\2\0\1\47\2\0\26\47\2\0\4\47\4\0"+
    "\1\51\1\0\1\51\7\0\1\51\2\0\26\51\3\0"+
    "\2\51\22\0\1\106\76\0\1\107\34\0\1\110\63\0"+
    "\1\111\7\0\1\112\35\0\1\113\62\0\1\114\64\0"+
    "\1\115\42\0\1\116\50\0\1\117\77\0\1\120\44\0"+
    "\1\121\52\0\1\122\55\0\1\123\61\0\1\124\46\0"+
    "\1\125\45\0\1\126\52\0\1\127\60\0\1\121\53\0"+
    "\1\130\63\0\1\131\44\0\1\132\72\0\1\133\42\0"+
    "\1\134\5\0\1\135\51\0\1\136\36\0\1\137\100\0"+
    "\1\140\43\0\1\141\54\0\1\142\44\0\1\143\56\0"+
    "\1\144\52\0\1\145\75\0\1\146\57\0\1\147\50\0"+
    "\1\150\57\0\1\140\33\0\1\151\56\0\1\141\51\0"+
    "\1\152\71\0\1\153\36\0\1\154\73\0\1\155\41\0"+
    "\1\156\70\0\1\157\53\0\1\160\51\0\1\161\40\0"+
    "\1\162\76\0\1\163\34\0\1\164\70\0\1\165\36\0"+
    "\1\141\74\0\1\166\51\0\1\167\57\0\1\170\54\0"+
    "\1\171\47\0\1\172\41\0\1\173\64\0\1\173\50\0"+
    "\1\174\63\0\1\140\61\0\1\175\55\0\1\176\53\0"+
    "\1\177\34\0\1\200\76\0\1\201\36\0\1\147\54\0"+
    "\1\202\67\0\1\203\50\0\1\204\64\0\1\205\35\0"+
    "\1\125\52\0\1\206\52\0\1\207\74\0\1\210\44\0"+
    "\1\211\51\0\1\146\67\0\1\212\37\0\1\213\55\0"+
    "\1\214\70\0\1\215\34\0\1\216\74\0\1\217\52\0"+
    "\1\220\56\0\1\140\44\0\1\221\64\0\1\222\40\0"+
    "\1\223\67\0\1\224\45\0\1\225\44\0\1\226\54\0"+
    "\1\227\57\0\1\230\34\0\1\231\110\0\1\232\37\0"+
    "\1\233\56\0\1\234\52\0\1\235\74\0\1\236\32\0"+
    "\1\237\54\0\1\240\72\0\1\106\46\0\1\241\61\0"+
    "\1\242\47\0\1\243\67\0\1\244\34\0\1\245\64\0"+
    "\1\246\57\0\1\247\60\0\1\250\50\0\1\251\56\0"+
    "\1\252\17\0\1\253\106\0\1\254\43\0\1\255\65\0"+
    "\1\256\37\0\1\257\100\0\1\260\51\0\1\261\33\0"+
    "\1\262\73\0\1\263\53\0\1\173\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6750];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\0\4\11\3\1\3\11\22\1\2\11"+
    "\1\1\2\11\2\1\1\11\1\1\2\11\10\0\1\11"+
    "\34\0\1\11\15\0\1\11\26\0\1\11\7\0\2\11"+
    "\4\0\1\11\5\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\6\0\1\11\1\0\2\11"+
    "\1\0\1\11\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

/* Crear un nuevo objeto java_cup.runtime.Symbol con informacion sobre
   el token actual sin valor */
 private Symbol symbol(int type) {

   return new Symbol(type,yyline,yycolumn);
 
 }
private Symbol symbol(int type,Object value){ 
	return new Symbol(type,yyline,yycolumn,value); 
}
/* Fin symbol */




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  analex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Token cadena <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.contenido_descripcion, new String(yytext()));
            }
            // fall through
          case 35: break;
          case 2:
            { System.out.print(yytext());
            }
            // fall through
          case 36: break;
          case 3:
            { 
            }
            // fall through
          case 37: break;
          case 4:
            { System.out.println("Token comilla encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.comillas), yybegin(IDENTIFICADOR); yybegin(IDENTIFICADOR);
            }
            // fall through
          case 38: break;
          case 5:
            { System.out.println("Token '-' encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.guion);
            }
            // fall through
          case 39: break;
          case 6:
            { System.out.println("Token digito_velocidad <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.digito_velocidad, new Integer(yytext()));
            }
            // fall through
          case 40: break;
          case 7:
            { System.out.println("Token numero <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.numero, new Integer(yytext()));
            }
            // fall through
          case 41: break;
          case 8:
            { System.out.println("Token ':' encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.dospuntos);
            }
            // fall through
          case 42: break;
          case 9:
            { System.out.println("Token ';' encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.puntoycoma);
            }
            // fall through
          case 43: break;
          case 10:
            { System.out.println("Token '[' encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
    yybegin(DESCRIPCION);
            }
            // fall through
          case 44: break;
          case 11:
            { System.out.println("Token unidad_cantidad <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.unidad_cantidad, new String(yytext()));
            }
            // fall through
          case 45: break;
          case 12:
            { System.out.println("Token unidad_tiempo <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.unidad_tiempo, new String(yytext()));
            }
            // fall through
          case 46: break;
          case 13:
            { System.out.println("Token { encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.llave_abierta);
            }
            // fall through
          case 47: break;
          case 14:
            { System.out.println("Token } encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
  return symbol(sym.llave_cerrada);
            }
            // fall through
          case 48: break;
          case 15:
            { /*Ignoramos el contenido de los comentarios*/
            }
            // fall through
          case 49: break;
          case 16:
            { /*Ignoramos los saltos de l√≠nea de los comentarios*/
            }
            // fall through
          case 50: break;
          case 17:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 51: break;
          case 18:
            { System.out.println("Token IDENT <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            }
            // fall through
          case 52: break;
          case 19:
            { System.out.println("Token comilla <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
    return symbol(sym.comillas); yybegin(YYINITIAL);
            }
            // fall through
          case 53: break;
          case 20:
            { yybegin(COMENTARIO); System.out.println("Comentario encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            }
            // fall through
          case 54: break;
          case 21:
            { System.out.println("Token unidad_temperatura <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.unidad_temp, new String(yytext()));
            }
            // fall through
          case 55: break;
          case 22:
            { System.out.println("Token verbo_mov <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.verbo_mov, new String(yytext()));
            }
            // fall through
          case 56: break;
          case 23:
            { System.out.println("Token pasos encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.pasos);
            }
            // fall through
          case 57: break;
          case 24:
            { System.out.println("Token verbo_per <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.verbo_per, new String(yytext()));
            }
            // fall through
          case 58: break;
          case 25:
            { System.out.println("Token total encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
  return symbol(sym.total);
            }
            // fall through
          case 59: break;
          case 26:
            { System.out.println("Token verbo_coc <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.verbo_coc, new String(yytext()));
            }
            // fall through
          case 60: break;
          case 27:
            { System.out.println("Token nombre encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
  return symbol(sym.nombre);
            }
            // fall through
          case 61: break;
          case 28:
            { System.out.println("Token receta encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.receta);
            }
            // fall through
          case 62: break;
          case 29:
            { System.out.println("Token tiempo encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
  return symbol(sym.tiempo);
            }
            // fall through
          case 63: break;
          case 30:
            { System.out.println("Token velocidad encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.velocidad);
            }
            // fall through
          case 64: break;
          case 31:
            { System.out.println("Token descripcion encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
  return symbol(sym.descripcion);
            }
            // fall through
          case 65: break;
          case 32:
            { System.out.println("Token preparacion encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.preparacion);
            }
            // fall through
          case 66: break;
          case 33:
            { System.out.println("Token temperatura encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.temperatura);
            }
            // fall through
          case 67: break;
          case 34:
            { System.out.println("Token ingredientes encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.ingredientes)
            }
            // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java analex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        analex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new analex(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
