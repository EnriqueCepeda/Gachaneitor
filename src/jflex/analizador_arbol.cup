/* ---------------------- Seccion de declaraciones package e imports--------------------*/
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/* ---------------------- Seccion  --------------------*/
parser code {:
	public static void main(String args[]) throws Exception {
	String dotfile = null;
	FileInputStream fichero = new FileInputStream(args[0]);
	DataInputStream entrada = new DataInputStream(fichero);

	String fileName = new File(args[0]).getAbsolutePath();
	int index_extension = fileName.lastIndexOf('.');
	if (index_extension > 0){
		fileName = fileName.substring(0,index_extension);
	}
	fileName += ".dot";	
	FileWriter output_file = new FileWriter(fileName);

	try{
	Symbol result = new parser(new analizadorArbol(entrada)).parse();
	dotfile = result.value.toString();
	output_file.write(dotfile);
	output_file.close();
	}
	catch ( Exception e ) {
		System.out.println("Analisis Incorrecto");
		System.exit(1);}
	System.out.println("Analisis Correcto");
	
	}
:}

/* ------------ Declaración de la lista de símbolos de la gramática ----------- */
terminal ARBOL, NODE, EDGE, HIJOS, CORCHETE_ABIERTO, CORCHETE_CERRADO; 
terminal LLAVE_ABIERTA, LLAVE_CERRADA, COLOR, FONTCOLOR;
terminal String FCOLOR_VAL;
terminal SHAPE;
terminal String SHAPE_VAL;
terminal LABEL, IGUAL, STYLE;
terminal String STYLE_VAL;
terminal COMA, PUNTO_COMA;
terminal String DIR_VALUE;
terminal DIR;
terminal String COMENTARIO;
terminal String IDENTIFICADOR;

non terminal arbol, expr, lista_expr;
non terminal configuracion_node, configuracion_edge, configuracion_edge_inicio, configuracion_node_inicio;
non terminal propiedades_node, propiedades_edge, label, shape, color, fontcolor, style, dir;
non terminal aristas, hijos;

/* -------------- Declaración de la gramática ----------- */

arbol ::= ARBOL IDENTIFICADOR:id LLAVE_ABIERTA lista_expr:exp LLAVE_CERRADA arbol:arb {:RESULT="digraph " + id + " {" +"\n" + exp  + "}"+ arb;:}
		| COMENTARIO:c arbol:arb  {: RESULT = c + arb; :}
		| {:RESULT = "";:};

lista_expr ::= expr:e lista_expr:l    {: RESULT = e.toString() + l.toString(); :}
			| expr:e {: RESULT = e;:};	  

expr ::= IDENTIFICADOR:id hijos:h CORCHETE_ABIERTO configuracion_node:c CORCHETE_CERRADO PUNTO_COMA {:RESULT = id + "[" + c + "];\n";
																									  StringTokenizer tokens = new StringTokenizer(h.toString(), ";");
																									  while(tokens.hasMoreTokens()){
																									  RESULT += id + "->" + tokens.nextToken() + "\n";
																									  }
																									  RESULT += "\n";:}
        | configuracion_node_inicio:c {:RESULT = c + "\n";:}
		| configuracion_edge_inicio:c {:RESULT = c + "\n";:}
		| COMENTARIO:c {:RESULT = c + "\n";:};

hijos ::= HIJOS IGUAL LLAVE_ABIERTA aristas:a LLAVE_CERRADA {:RESULT = a;:} 
		| {:RESULT = "";:}; 

aristas ::= IDENTIFICADOR:id CORCHETE_ABIERTO configuracion_edge:ced CORCHETE_CERRADO COMA aristas:a {:RESULT = id + "[" + ced + "];" + a;:}
		|	IDENTIFICADOR:id CORCHETE_ABIERTO configuracion_edge:ced CORCHETE_CERRADO {:RESULT = id + "[" + ced + "]";:};


/* -------------- Configuracion global nodes y edges ----------- */

configuracion_node_inicio ::= NODE CORCHETE_ABIERTO configuracion_node:c CORCHETE_CERRADO  {: RESULT = "node ["+c+"]"; :};
configuracion_node ::= propiedades_node:p COMA configuracion_node:c						   {: RESULT = p + ", " + c; :}  
					| propiedades_node:p											       {: RESULT = p; :};

propiedades_node ::=  label:l 															   {: RESULT = l; :}
			|  shape:s																	   {: RESULT = s; :}

			|  color:c																	   {: RESULT = c;:}
			|  fontcolor:f																   {: RESULT = f; :}
			|  style:s																	   {: RESULT = s; :};

configuracion_edge_inicio ::= EDGE CORCHETE_ABIERTO configuracion_edge:c CORCHETE_CERRADO  {: RESULT = "edge [" + c + "]"; :} ;
configuracion_edge ::= propiedades_edge:p COMA configuracion_edge:c							{: RESULT = p + ", " + c; :}
					| propiedades_edge:p 														{: RESULT = p; :};

propiedades_edge ::= label:l 																 	{: RESULT = l; :}
					|  dir:d 																	{: RESULT = d; :}
					|  color:c 												 					{: RESULT = c; :}
					|  fontcolor:f																{: RESULT = f; :}
					|  style:s																	{: RESULT = s; :};

label ::= LABEL IGUAL IDENTIFICADOR:id {:RESULT = "label = "+id; :};
shape ::= SHAPE IGUAL SHAPE_VAL:shvalue {:RESULT = "shape = "+shvalue; :};
color ::= COLOR IGUAL FCOLOR_VAL:fcolorvalue {:RESULT = "color = "+fcolorvalue; :};
fontcolor ::= FONTCOLOR IGUAL FCOLOR_VAL:fcolorvalue {:RESULT = "fontcolor = "+fcolorvalue; :};
style ::= STYLE IGUAL STYLE_VAL:stylevalue {:RESULT = "style = "+stylevalue; :};
dir ::= DIR IGUAL DIR_VALUE:dirvalue {:RESULT = "dir = "+dirvalue; :};

