/* ----------------------Seccion de declaraciones package e imports--------------------*/

import java_cup.runtime.*;

import java.util.ArrayList;

import java.io.OutputStreamWriter;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;

/* ----------------------Seccion componentes de codigo de usuario --------------------*/

parser code{:

    public static void escribir_receta(ArrayList<Receta> recetas){
        String text = "[";
        for (int i = 0; i< recetas.size()-1; i++){
            text = text + recetas.get(i).toString() + ", ";
        }
        text = text + recetas.get(recetas.size()-1).toString()+"]";

        try{
            OutputStream os = new FileOutputStream("salida.json");
            PrintWriter pw = new PrintWriter(new OutputStreamWriter(os, "UTF-8"));
            pw.write(text);
            pw.close();
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    public void syntax_error(String str, int linea, int columna, String mensaje_adicional, boolean fatal){
        
        StringBuffer m = new StringBuffer("");
        if (fatal){
            m.append("Error fatal: ");
        }else{
            m.append("Warning: ");
        }
        
        if (!mensaje_adicional.equals(""))
            m.append(mensaje_adicional);

        //m.append(" en el símbolo "+str);
        
        if (linea >= 0) {                
            m.append(" en línea "+String.valueOf(linea+1));   
            if (columna >= 0)                    
                m.append(" y columna "+String.valueOf(columna+1));
        }

        //m.append("\n");
        System.err.println(m);
    }

    public void report_syntax_error(Object s, int linea, int columna, String mensaje_adicional, boolean fatal){
        if (!(s instanceof String)){
            String str = String.valueOf(s);
            syntax_error(str, linea, columna, mensaje_adicional, fatal);
        }else{
            syntax_error((String)s, linea, columna, mensaje_adicional, fatal);
        }
        if (fatal)
            System.exit(1);
    }
    
:}


/* ------------Declaracion de la lista de simbolos de la gramatica-----------*/

terminal Integer numero;
terminal String ident_nombre, contenido_descripcion, unidad_cantidad, unidad_temp, unidad_tiempo, verbo_mov, verbo_coc, verbo_per, digito_velocidad;
terminal receta, descripcion, nombre, tiempo, total, preparacion, dospuntos, puntoycoma, guion, pasos, ingredientes, temperatura, velocidad, llave_abierta, llave_cerrada, comilla;

non terminal INICIO, RECETA, NOMBRE, DESCRIPCION, TIEMPO_RECETA, INGREDIENTES, LISTA_INGREDIENTES, INGREDIENTE, INGREDIENTE_PARTE_DERECHA, PASOS, LISTA_PASOS, PASO, PASO_MOV, PASO_COC, PASO_PER, TIEMPO, CANTIDAD, TEMPERATURA, VELOCIDAD;


/* -------------Declaracion de precedencias -----------*/



/* --------------Declaracion de la gramatica -----------*/

INICIO ::= 
    RECETA:r {: ArrayList<Receta> lista = new ArrayList<Receta>(); 
                lista.add((Receta)r); escribir_receta(lista); RESULT=lista;:}
    | RECETA:r INICIO:lr {:((ArrayList<Receta>)lr).add(0, (Receta)r);
                             escribir_receta((ArrayList<Receta>)lr); RESULT=lr;:}
    ;

RECETA ::= 
    receta llave_abierta NOMBRE:n DESCRIPCION:d TIEMPO_RECETA:tr INGREDIENTES:i PASOS:p llave_cerrada 
        {:Receta receta = new Receta((String)n, (String)d, (Tiempo)tr, (ArrayList<Ingrediente>)i, (ArrayList<Paso>)p);
            ComprobadorSemantica.comprobarReceta(receta);
            RESULT=receta;:}
    | llave_abierta NOMBRE:n DESCRIPCION:d TIEMPO_RECETA:tr INGREDIENTES:i PASOS:p llave_cerrada 
         {:Receta receta = new Receta((String)n, (String)d, (Tiempo)tr, (ArrayList<Ingrediente>)i, (ArrayList<Paso>)p);
            ComprobadorSemantica.comprobarReceta(receta);
            RESULT=receta;:};


NOMBRE ::= 
    nombre comilla ident_nombre:n comilla {:RESULT=n;:}
    | comilla ident_nombre:n comilla {:RESULT=n;:}
    ;

DESCRIPCION ::= 
    descripcion contenido_descripcion:cn {:RESULT=cn;:}
    | contenido_descripcion:cn {:RESULT=cn;:}
    ;

TIEMPO_RECETA ::=
    tiempo llave_abierta total TIEMPO:tt preparacion TIEMPO:tp llave_cerrada 
        {:RESULT = new Tiempo((Cantidad)tt, (Cantidad)tp);:}
    | llave_abierta total TIEMPO:tt preparacion TIEMPO:tp llave_cerrada 
        {:RESULT = new Tiempo((Cantidad)tt, (Cantidad)tp);:};

INGREDIENTES ::= 
    ingredientes llave_abierta LISTA_INGREDIENTES:li llave_cerrada 
        {:li = ComprobadorSemantica.comprobarDefinicionIngredientes((ArrayList<Ingrediente>)li);
            RESULT = li;:}
    | llave_abierta LISTA_INGREDIENTES:li llave_cerrada
        {:li = ComprobadorSemantica.comprobarDefinicionIngredientes((ArrayList<Ingrediente>)li);
            RESULT = li;:};

LISTA_INGREDIENTES ::= 
    INGREDIENTE:i {:ArrayList<Ingrediente> lista = new ArrayList<Ingrediente>(); 
                                lista.add((Ingrediente)i); RESULT = lista;:}
    | INGREDIENTE:i puntoycoma {:ArrayList<Ingrediente> lista = new ArrayList<Ingrediente>(); 
                                lista.add((Ingrediente)i); RESULT = lista;:}
    | INGREDIENTE:i LISTA_INGREDIENTES:li 
                            {:((ArrayList<Ingrediente>)li).add(0, (Ingrediente)i); RESULT = li;:}
    | INGREDIENTE:i puntoycoma LISTA_INGREDIENTES:li 
                            {:((ArrayList<Ingrediente>)li).add(0, (Ingrediente)i); RESULT = li;:};

INGREDIENTE ::= comilla ident_nombre:in comilla INGREDIENTE_PARTE_DERECHA:ipd 
                    {:RESULT = new Ingrediente(in, (Cantidad)ipd);:};

INGREDIENTE_PARTE_DERECHA ::= 
    dospuntos CANTIDAD:c {:RESULT=(Cantidad)c;:}
    | CANTIDAD:c {:RESULT=(Cantidad)c;:};

PASOS ::=
    pasos llave_abierta LISTA_PASOS:lp llave_cerrada 
        {:RESULT = lp;:}
    | llave_abierta LISTA_PASOS:lp llave_cerrada 
        {:RESULT = lp;:};
    
LISTA_PASOS ::= 
    PASO:p {:ArrayList<Paso> lista = new ArrayList<Paso>(); lista.add((Paso)p); RESULT = lista;:}
    | PASO:p LISTA_PASOS:lp {:((ArrayList<Paso>)lp).add(0, (Paso)p); RESULT = lp;:}
    ;

PASO ::=
    PASO_MOV:pm {:RESULT = pm;:}
    | PASO_COC:pc {:RESULT = pc;:}
    | PASO_PER:pp {:RESULT = pp;:};
    /*| guion LISTA_INGREDIENTES:li 
        {:report_syntax_error(String.valueOf(li), lileft, liright, "Falta el verbo en el paso", true);:};*/

PASO_MOV ::= guion verbo_mov:vm LISTA_INGREDIENTES:li TIEMPO:t VELOCIDAD:v 
                {:RESULT = new Paso_mov(vm, "mover", (ArrayList<Ingrediente>)li, (Cantidad)t, (String)v);:}
            | verbo_mov:vm LISTA_INGREDIENTES:li TIEMPO:t VELOCIDAD:v
                {:report_syntax_error(String.valueOf(vm), vmleft, vmright, "Falta el guion en el paso", false);
                    RESULT = new Paso_mov(vm, "mover", (ArrayList<Ingrediente>)li, (Cantidad)t, (String)v);:};
PASO_COC ::= guion verbo_coc:vc LISTA_INGREDIENTES:li TIEMPO:t TEMPERATURA:temp
                {:RESULT = new Paso_coc(vc, "cocinar", (ArrayList<Ingrediente>)li, (Cantidad)t, (Cantidad)temp);:}
            | verbo_coc:vc LISTA_INGREDIENTES:li TIEMPO:t TEMPERATURA:temp
                {:report_syntax_error(String.valueOf(vc), vcleft, vcright, "Falta el guion en el paso", false);
                    RESULT = new Paso_coc(vc, "cocinar", (ArrayList<Ingrediente>)li, (Cantidad)t, (Cantidad)temp);:};
PASO_PER ::= guion verbo_per:vp LISTA_INGREDIENTES:li 
                {:RESULT = new Paso_per(vp, "persona", (ArrayList<Ingrediente>)li);:}
            | verbo_per:vp LISTA_INGREDIENTES:li 
                {:report_syntax_error(String.valueOf(vp), vpleft, vpright, "Falta el guion en el paso", false);
                    RESULT = new Paso_per(vp, "persona", (ArrayList<Ingrediente>)li);:};

CANTIDAD ::= numero:n unidad_cantidad:uc {:RESULT = new Cantidad(n, uc);:}
            | unidad_cantidad:uc
                {:report_syntax_error(String.valueOf(uc), ucleft, ucright, "Falta el número en la cantidad", true);:}
            | numero:n
                 {:report_syntax_error(String.valueOf(n), nleft, nright, "Falta la unidad de la cantidad en la cantidad",  true);:};
TIEMPO ::= numero:n unidad_tiempo:ut {: RESULT = new Cantidad(n, ut);:}
            | numero:n
                 {:report_syntax_error(String.valueOf(n), nleft, nright, "Falta unidad de tiempo en el tiempo", true);:}
            | unidad_tiempo:ut
                 {:report_syntax_error(String.valueOf(ut), utleft, utright, "Falta número en el tiempo", true);:};

TEMPERATURA ::= temperatura numero:n unidad_temp:ut {:RESULT = new Cantidad(n, ut);:}
            | numero:n unidad_temp:ut 
                {:report_syntax_error(String.valueOf(n), nleft, nright, "Falta la palabra temperatura", false); 
                    RESULT = new Cantidad(n, ut);:}
            | numero:n
                 {:report_syntax_error(String.valueOf(n), nleft, nright, "Falta unidad de temperatura en la temperatura", true);:}
            | unidad_temp:ut
                 {:report_syntax_error(String.valueOf(ut), utleft, utright, "Falta número en la temperatura", true);:};           

VELOCIDAD ::= velocidad digito_velocidad:dv {:RESULT=dv;:}
            | digito_velocidad:dv {:report_syntax_error(String.valueOf(dv), dvleft, dvright, "Falta la palabra velocidad", false);
                                    RESULT=dv;:};

