
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.OutputStreamWriter;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\012\000\002\003\011\000\002\004\006" +
    "\000\002\004\005\000\002\005\004\000\002\005\003\000" +
    "\002\006\011\000\002\006\010\000\002\007\006\000\002" +
    "\007\005\000\002\010\003\000\002\010\004\000\002\010" +
    "\004\000\002\010\005\000\002\011\006\000\002\012\004" +
    "\000\002\012\003\000\002\013\006\000\002\013\005\000" +
    "\002\014\003\000\002\014\004\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\007\000\002\016" +
    "\006\000\002\017\007\000\002\017\006\000\002\020\005" +
    "\000\002\020\004\000\002\022\004\000\002\022\003\000" +
    "\002\022\003\000\002\021\004\000\002\021\003\000\002" +
    "\021\003\000\002\023\005\000\002\023\004\000\002\023" +
    "\003\000\002\023\003\000\002\024\004\000\002\024\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\006\016\005\033\006\001\002\000\010\002" +
    "\001\016\005\033\006\001\002\000\004\033\150\001\002" +
    "\000\006\020\013\035\012\001\002\000\004\002\010\001" +
    "\002\000\004\002\000\001\002\000\006\006\022\017\021" +
    "\001\002\000\004\005\017\001\002\000\004\035\014\001" +
    "\002\000\004\005\015\001\002\000\004\035\016\001\002" +
    "\000\006\006\ufffc\017\ufffc\001\002\000\004\035\020\001" +
    "\002\000\006\006\ufffb\017\ufffb\001\002\000\004\006\147" +
    "\001\002\000\006\021\ufff9\033\ufff9\001\002\000\006\021" +
    "\026\033\025\001\002\000\006\030\046\033\047\001\002" +
    "\000\004\022\040\001\002\000\004\033\027\001\002\000" +
    "\004\022\030\001\002\000\006\004\031\011\032\001\002" +
    "\000\022\004\uffdc\010\uffdc\011\037\015\uffdc\023\uffdc\031" +
    "\uffdc\032\uffdc\034\uffdc\001\002\000\020\004\uffdb\010\uffdb" +
    "\015\uffdb\023\uffdb\031\uffdb\032\uffdb\034\uffdb\001\002\000" +
    "\004\023\034\001\002\000\006\004\031\011\032\001\002" +
    "\000\004\034\036\001\002\000\006\030\ufff8\033\ufff8\001" +
    "\002\000\020\004\uffdd\010\uffdd\015\uffdd\023\uffdd\031\uffdd" +
    "\032\uffdd\034\uffdd\001\002\000\006\004\031\011\032\001" +
    "\002\000\004\023\042\001\002\000\006\004\031\011\032" +
    "\001\002\000\004\034\044\001\002\000\006\030\ufff7\033" +
    "\ufff7\001\002\000\006\027\073\033\075\001\002\000\004" +
    "\033\070\001\002\000\004\035\051\001\002\000\004\034" +
    "\067\001\002\000\004\005\056\001\002\000\024\004\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\025\054\026\ufff4\034" +
    "\ufff4\035\051\001\002\000\020\004\ufff2\011\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\026\ufff2\034\ufff2\001\002\000\022\004" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\026\ufff3\034\ufff3" +
    "\035\051\001\002\000\020\004\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\026\ufff1\034\ufff1\001\002\000\004\035\057" +
    "\001\002\000\010\004\061\007\060\024\064\001\002\000" +
    "\024\004\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\025\uffdf" +
    "\026\uffdf\034\uffdf\035\uffdf\001\002\000\026\004\uffde\007" +
    "\066\011\uffde\012\uffde\013\uffde\014\uffde\025\uffde\026\uffde" +
    "\034\uffde\035\uffde\001\002\000\024\004\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\025\ufff0\026\ufff0\034\ufff0\035\ufff0" +
    "\001\002\000\024\004\uffee\011\uffee\012\uffee\013\uffee\014" +
    "\uffee\025\uffee\026\uffee\034\uffee\035\uffee\001\002\000\006" +
    "\004\061\007\060\001\002\000\024\004\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\025\uffef\026\uffef\034\uffef\035\uffef" +
    "\001\002\000\024\004\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\025\uffe0\026\uffe0\034\uffe0\035\uffe0\001\002\000\006" +
    "\027\ufff5\033\ufff5\001\002\000\004\035\051\001\002\000" +
    "\004\034\072\001\002\000\006\027\ufff6\033\ufff6\001\002" +
    "\000\004\033\144\001\002\000\004\034\143\001\002\000" +
    "\012\012\101\013\076\014\103\026\106\001\002\000\004" +
    "\035\051\001\002\000\014\012\uffe9\013\uffe9\014\uffe9\026" +
    "\uffe9\034\uffe9\001\002\000\014\012\uffe7\013\uffe7\014\uffe7" +
    "\026\uffe7\034\uffe7\001\002\000\004\035\051\001\002\000" +
    "\004\034\134\001\002\000\004\035\051\001\002\000\014" +
    "\012\uffe8\013\uffe8\014\uffe8\026\uffe8\034\uffe8\001\002\000" +
    "\014\012\101\013\076\014\103\026\106\034\uffeb\001\002" +
    "\000\010\012\107\013\110\014\111\001\002\000\004\035" +
    "\051\001\002\000\004\035\051\001\002\000\004\035\051" +
    "\001\002\000\014\012\uffe2\013\uffe2\014\uffe2\026\uffe2\034" +
    "\uffe2\001\002\000\006\004\031\011\032\001\002\000\010" +
    "\004\116\010\120\031\117\001\002\000\014\012\uffe4\013" +
    "\uffe4\014\uffe4\026\uffe4\034\uffe4\001\002\000\016\010\123" +
    "\012\uffd8\013\uffd8\014\uffd8\026\uffd8\034\uffd8\001\002\000" +
    "\004\004\121\001\002\000\014\012\uffd7\013\uffd7\014\uffd7" +
    "\026\uffd7\034\uffd7\001\002\000\004\010\122\001\002\000" +
    "\014\012\uffda\013\uffda\014\uffda\026\uffda\034\uffda\001\002" +
    "\000\014\012\uffd9\013\uffd9\014\uffd9\026\uffd9\034\uffd9\001" +
    "\002\000\006\004\031\011\032\001\002\000\006\015\130" +
    "\032\127\001\002\000\014\012\uffe6\013\uffe6\014\uffe6\026" +
    "\uffe6\034\uffe6\001\002\000\004\015\131\001\002\000\014" +
    "\012\uffd5\013\uffd5\014\uffd5\026\uffd5\034\uffd5\001\002\000" +
    "\014\012\uffd6\013\uffd6\014\uffd6\026\uffd6\034\uffd6\001\002" +
    "\000\004\034\uffea\001\002\000\014\012\uffe1\013\uffe1\014" +
    "\uffe1\026\uffe1\034\uffe1\001\002\000\004\034\uffec\001\002" +
    "\000\006\004\031\011\032\001\002\000\006\015\130\032" +
    "\127\001\002\000\014\012\uffe5\013\uffe5\014\uffe5\026\uffe5" +
    "\034\uffe5\001\002\000\006\004\031\011\032\001\002\000" +
    "\010\004\116\010\120\031\117\001\002\000\014\012\uffe3" +
    "\013\uffe3\014\uffe3\026\uffe3\034\uffe3\001\002\000\010\002" +
    "\ufffd\016\ufffd\033\ufffd\001\002\000\012\012\101\013\076" +
    "\014\103\026\106\001\002\000\004\034\146\001\002\000" +
    "\004\034\uffed\001\002\000\006\021\ufffa\033\ufffa\001\002" +
    "\000\006\020\013\035\012\001\002\000\006\006\022\017" +
    "\021\001\002\000\006\021\026\033\025\001\002\000\006" +
    "\030\046\033\047\001\002\000\006\027\073\033\075\001" +
    "\002\000\004\034\156\001\002\000\010\002\ufffe\016\ufffe" +
    "\033\ufffe\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\006\002\006\003\003\001\001\000\006\002" +
    "\156\003\003\001\001\000\002\001\001\000\004\004\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\023\001\001\000\004\007\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\040\001" +
    "\001\000\002\001\001\000\004\021\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\073\001\001\000" +
    "\002\001\001\000\006\010\047\011\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\052\011\051\001" +
    "\001\000\002\001\001\000\006\010\054\011\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\061\022" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\070\011\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\101" +
    "\015\104\016\076\017\103\020\077\001\001\000\006\010" +
    "\137\011\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\134\011\051\001\001\000\002\001\001\000" +
    "\006\010\132\011\051\001\001\000\002\001\001\000\014" +
    "\014\131\015\104\016\076\017\103\020\077\001\001\000" +
    "\002\001\001\000\006\010\123\011\051\001\001\000\006" +
    "\010\112\011\051\001\001\000\006\010\111\011\051\001" +
    "\001\000\002\001\001\000\004\021\113\001\001\000\004" +
    "\023\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\124\001\001\000" +
    "\004\024\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\135\001\001" +
    "\000\004\024\136\001\001\000\002\001\001\000\004\021" +
    "\140\001\001\000\004\023\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\014\144\015\104\016\076\017" +
    "\103\020\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\150\001\001\000\004\005" +
    "\151\001\001\000\004\006\152\001\001\000\004\007\153" +
    "\001\001\000\004\013\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static void escribir_receta(ArrayList<Receta> recetas){
        String text = "[";
        for (int i = 0; i< recetas.size()-1; i++){
            text = text + recetas.get(i).toString() + ", ";
        }
        text = text + recetas.get(recetas.size()-1).toString()+"]";

        try{
            OutputStream os = new FileOutputStream("salida.json");
            PrintWriter pw = new PrintWriter(new OutputStreamWriter(os, "UTF-8"));
            pw.write(text);
            pw.close();
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    public void syntax_error(String str, int linea, int columna, String mensaje_adicional, boolean fatal){
        
        StringBuffer m = new StringBuffer("");
        if (fatal){
            m.append("Error fatal: ");
        }else{
            m.append("Warning: ");
        }
        
        if (!mensaje_adicional.equals(""))
            m.append(mensaje_adicional);

        //m.append(" en el símbolo "+str);
        
        if (linea >= 0) {                
            m.append(" en línea "+String.valueOf(linea+1));   
            if (columna >= 0)                    
                m.append(" y columna "+String.valueOf(columna+1));
        }

        //m.append("\n");
        System.err.println(m);
    }

    public void report_syntax_error(Object s, int linea, int columna, String mensaje_adicional, boolean fatal) throws Exception{
        if (!(s instanceof String)){
            String str = String.valueOf(s);
            syntax_error(str, linea, columna, mensaje_adicional, fatal);
        }else{
            syntax_error((String)s, linea, columna, mensaje_adicional, fatal);
        }
        if (fatal)
            //System.exit(1);
            throw new Exception();
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= RECETA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Receta> lista = new ArrayList<Receta>(); 
                lista.add((Receta)r); escribir_receta(lista); RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= RECETA INICIO 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Receta>)lr).add(0, (Receta)r);
                             escribir_receta((ArrayList<Receta>)lr); RESULT=lr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // RECETA ::= receta llave_abierta NOMBRE DESCRIPCION TIEMPO_RECETA INGREDIENTES PASOS llave_cerrada 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Receta receta = new Receta((String)n, (String)d, (Tiempo)tr, (ArrayList<Ingrediente>)i, (ArrayList<Paso>)p);
            ComprobadorSemantica.comprobarReceta(receta);
            RESULT=receta;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RECETA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RECETA ::= llave_abierta NOMBRE DESCRIPCION TIEMPO_RECETA INGREDIENTES PASOS llave_cerrada 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Receta receta = new Receta((String)n, (String)d, (Tiempo)tr, (ArrayList<Ingrediente>)i, (ArrayList<Paso>)p);
            ComprobadorSemantica.comprobarReceta(receta);
            RESULT=receta;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RECETA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NOMBRE ::= nombre comilla ident_nombre comilla 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NOMBRE ::= comilla ident_nombre comilla 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DESCRIPCION ::= descripcion contenido_descripcion 
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DESCRIPCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DESCRIPCION ::= contenido_descripcion 
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DESCRIPCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIEMPO_RECETA ::= tiempo llave_abierta total TIEMPO preparacion TIEMPO llave_cerrada 
            {
              Object RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Tiempo((Cantidad)tt, (Cantidad)tp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIEMPO_RECETA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIEMPO_RECETA ::= llave_abierta total TIEMPO preparacion TIEMPO llave_cerrada 
            {
              Object RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Tiempo((Cantidad)tt, (Cantidad)tp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIEMPO_RECETA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INGREDIENTES ::= ingredientes llave_abierta LISTA_INGREDIENTES llave_cerrada 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		li = ComprobadorSemantica.comprobarDefinicionIngredientes((ArrayList<Ingrediente>)li);
            RESULT = li;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INGREDIENTES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INGREDIENTES ::= llave_abierta LISTA_INGREDIENTES llave_cerrada 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		li = ComprobadorSemantica.comprobarDefinicionIngredientes((ArrayList<Ingrediente>)li);
            RESULT = li;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INGREDIENTES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_INGREDIENTES ::= INGREDIENTE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Ingrediente> lista = new ArrayList<Ingrediente>(); 
                                lista.add((Ingrediente)i); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_INGREDIENTES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA_INGREDIENTES ::= INGREDIENTE puntoycoma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ArrayList<Ingrediente> lista = new ArrayList<Ingrediente>(); 
                                lista.add((Ingrediente)i); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_INGREDIENTES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTA_INGREDIENTES ::= INGREDIENTE LISTA_INGREDIENTES 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Ingrediente>)li).add(0, (Ingrediente)i); RESULT = li;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_INGREDIENTES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTA_INGREDIENTES ::= INGREDIENTE puntoycoma LISTA_INGREDIENTES 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Ingrediente>)li).add(0, (Ingrediente)i); RESULT = li;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_INGREDIENTES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INGREDIENTE ::= comilla ident_nombre comilla INGREDIENTE_PARTE_DERECHA 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ipdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ipdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ipd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Ingrediente(in, (Cantidad)ipd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INGREDIENTE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INGREDIENTE_PARTE_DERECHA ::= dospuntos CANTIDAD 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=(Cantidad)c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INGREDIENTE_PARTE_DERECHA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INGREDIENTE_PARTE_DERECHA ::= CANTIDAD 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=(Cantidad)c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INGREDIENTE_PARTE_DERECHA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PASOS ::= pasos llave_abierta LISTA_PASOS llave_cerrada 
            {
              Object RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = lp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PASOS ::= llave_abierta LISTA_PASOS llave_cerrada 
            {
              Object RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = lp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTA_PASOS ::= PASO 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Paso> lista = new ArrayList<Paso>(); lista.add((Paso)p); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PASOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTA_PASOS ::= PASO LISTA_PASOS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Paso>)lp).add(0, (Paso)p); RESULT = lp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PASOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PASO ::= PASO_MOV 
            {
              Object RESULT =null;
		int pmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = pm;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PASO ::= PASO_COC 
            {
              Object RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = pc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PASO ::= PASO_PER 
            {
              Object RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = pp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PASO_MOV ::= guion verbo_mov LISTA_INGREDIENTES TIEMPO VELOCIDAD 
            {
              Object RESULT =null;
		int vmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Paso_mov(vm, "mover", (ArrayList<Ingrediente>)li, (Cantidad)t, (String)v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASO_MOV",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PASO_MOV ::= verbo_mov LISTA_INGREDIENTES TIEMPO VELOCIDAD 
            {
              Object RESULT =null;
		int vmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		report_syntax_error(String.valueOf(vm), vmleft, vmright, "Falta el guion en el paso", false);
                    RESULT = new Paso_mov(vm, "mover", (ArrayList<Ingrediente>)li, (Cantidad)t, (String)v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASO_MOV",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PASO_COC ::= guion verbo_coc LISTA_INGREDIENTES TIEMPO TEMPERATURA 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int templeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tempright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object temp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Paso_coc(vc, "cocinar", (ArrayList<Ingrediente>)li, (Cantidad)t, (Cantidad)temp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASO_COC",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PASO_COC ::= verbo_coc LISTA_INGREDIENTES TIEMPO TEMPERATURA 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int templeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tempright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object temp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		report_syntax_error(String.valueOf(vc), vcleft, vcright, "Falta el guion en el paso", false);
                    RESULT = new Paso_coc(vc, "cocinar", (ArrayList<Ingrediente>)li, (Cantidad)t, (Cantidad)temp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASO_COC",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PASO_PER ::= guion verbo_per LISTA_INGREDIENTES 
            {
              Object RESULT =null;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Paso_per(vp, "persona", (ArrayList<Ingrediente>)li);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASO_PER",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PASO_PER ::= verbo_per LISTA_INGREDIENTES 
            {
              Object RESULT =null;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		report_syntax_error(String.valueOf(vp), vpleft, vpright, "Falta el guion en el paso", false);
                    RESULT = new Paso_per(vp, "persona", (ArrayList<Ingrediente>)li);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASO_PER",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CANTIDAD ::= numero unidad_cantidad 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ucleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ucright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String uc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Cantidad(n, uc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTIDAD",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CANTIDAD ::= unidad_cantidad 
            {
              Object RESULT =null;
		int ucleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ucright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String uc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		report_syntax_error(String.valueOf(uc), ucleft, ucright, "Falta el número en la cantidad", true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTIDAD",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CANTIDAD ::= numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		report_syntax_error(String.valueOf(n), nleft, nright, "Falta la unidad de la cantidad en la cantidad",  true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTIDAD",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIEMPO ::= numero unidad_tiempo 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int utleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int utright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ut = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Cantidad(n, ut);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIEMPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIEMPO ::= numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		report_syntax_error(String.valueOf(n), nleft, nright, "Falta unidad de tiempo en el tiempo", true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIEMPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIEMPO ::= unidad_tiempo 
            {
              Object RESULT =null;
		int utleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int utright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ut = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		report_syntax_error(String.valueOf(ut), utleft, utright, "Falta número en el tiempo", true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIEMPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TEMPERATURA ::= temperatura numero unidad_temp 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int utleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int utright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ut = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Cantidad(n, ut);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEMPERATURA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TEMPERATURA ::= numero unidad_temp 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int utleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int utright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ut = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		report_syntax_error(String.valueOf(n), nleft, nright, "Falta la palabra temperatura", false); 
                    RESULT = new Cantidad(n, ut);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEMPERATURA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TEMPERATURA ::= numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		report_syntax_error(String.valueOf(n), nleft, nright, "Falta unidad de temperatura en la temperatura", true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEMPERATURA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TEMPERATURA ::= unidad_temp 
            {
              Object RESULT =null;
		int utleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int utright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ut = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		report_syntax_error(String.valueOf(ut), utleft, utright, "Falta número en la temperatura", true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEMPERATURA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VELOCIDAD ::= velocidad digito_velocidad 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=dv;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VELOCIDAD",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VELOCIDAD ::= digito_velocidad 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		report_syntax_error(String.valueOf(dv), dvleft, dvright, "Falta la palabra velocidad", false);
                                    RESULT=dv;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VELOCIDAD",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
