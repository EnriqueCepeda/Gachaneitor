/* The following code was generated by JFlex 1.7.0 */

//* --------------------------Seccion codigo-usuario ------------------------*/ 
import java.io.*;
import java_cup.runtime.*;

class Utility{

  private static final String errorMsg[] = {
    "Error: Símbolo de fin de comentario no emparejado", 
    "Error: Símbolo de comienzo de comentario no emparejado",
    "Error: Símbolo de fin de identificador no emparejado",
    "Error: Símbolo de fin de descripción no emparejado", 
    "Error: Símbolo de comienzo de descripción no emparejado",
    "Error: Caracter ilegal "
  };

  public static final int E_ENDCOMMENT = 0; 
  public static final int E_STARTCOMMENT = 1;
  public static final int E_ENDIDENT = 2; 
  public static final int E_ENDDESC = 3; 
  public static final int E_STARTDESC = 4;
  public static final int E_UNMATCHED = 5; 

  public static void error(int code, String cadena, int line, int column) {
    System.out.println(errorMsg[code] + cadena + " en la línea "+ line + " y columna " + column);
  }

}

/* -----------------Seccion de opciones y declaraciones -----------------*/ 
/*--OPCIONES --*/ 
/* Nombre de la clase generada para el analizadorlexico*/ 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>AnalizadorLexico.flex</tt>
 */
class analex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int DESCRIPCION = 4;
  public static final int IDENTIFICADOR = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\33\1\1\1\53\1\54\1\54\1\53\16\33\4\0\1\2\1\0"+
    "\1\47\1\0\1\34\5\0\1\51\2\0\1\41\1\33\1\50\1\46"+
    "\11\43\1\37\1\40\5\0\2\34\1\32\2\34\1\32\24\34\1\42"+
    "\1\0\1\52\1\0\1\34\1\0\1\7\1\12\1\5\1\13\1\14"+
    "\1\25\1\27\1\26\1\4\1\15\1\30\1\3\1\21\1\23\1\17"+
    "\1\16\1\34\1\10\1\20\1\11\1\6\1\24\3\34\1\22\1\35"+
    "\1\1\1\36\1\0\6\33\1\55\32\33\2\0\4\34\4\0\1\34"+
    "\2\0\1\33\7\0\1\34\4\0\1\31\5\0\27\34\1\0\37\34"+
    "\1\0\u01ca\34\4\0\14\34\16\0\5\34\7\0\1\34\1\0\1\34"+
    "\21\0\160\33\5\34\1\0\2\34\2\0\4\34\10\0\1\34\1\0"+
    "\3\34\1\0\1\34\1\0\24\34\1\0\123\34\1\0\213\34\1\0"+
    "\5\33\2\0\236\34\11\0\46\34\2\0\1\34\7\0\47\34\7\0"+
    "\1\34\1\0\55\33\1\0\1\33\1\0\2\33\1\0\2\33\1\0"+
    "\1\33\10\0\33\34\5\0\3\34\15\0\5\33\6\0\1\34\4\0"+
    "\13\33\5\0\53\34\25\33\12\45\4\0\2\34\1\33\143\34\1\0"+
    "\1\34\10\33\1\0\6\33\2\34\2\33\1\0\4\33\2\34\12\45"+
    "\3\34\2\0\1\34\17\0\1\33\1\34\1\33\36\34\33\33\2\0"+
    "\131\34\13\33\1\34\16\0\12\45\41\34\11\33\2\34\4\0\1\34"+
    "\5\0\26\34\4\33\1\34\11\33\1\34\3\33\1\34\5\33\22\0"+
    "\31\34\3\33\104\0\1\34\1\0\13\34\67\0\33\33\1\0\4\33"+
    "\66\34\3\33\1\34\22\33\1\34\7\33\12\34\2\33\2\0\12\45"+
    "\1\0\7\34\1\0\7\34\1\0\3\33\1\0\10\34\2\0\2\34"+
    "\2\0\26\34\1\0\7\34\1\0\1\34\3\0\4\34\2\0\1\33"+
    "\1\34\7\33\2\0\2\33\2\0\3\33\1\34\10\0\1\33\4\0"+
    "\2\34\1\0\3\34\2\33\2\0\12\45\4\34\7\0\1\34\5\0"+
    "\3\33\1\0\6\34\4\0\2\34\2\0\26\34\1\0\7\34\1\0"+
    "\2\34\1\0\2\34\1\0\2\34\2\0\1\33\1\0\5\33\4\0"+
    "\2\33\2\0\3\33\3\0\1\33\7\0\4\34\1\0\1\34\7\0"+
    "\12\45\2\33\3\34\1\33\13\0\3\33\1\0\11\34\1\0\3\34"+
    "\1\0\26\34\1\0\7\34\1\0\2\34\1\0\5\34\2\0\1\33"+
    "\1\34\10\33\1\0\3\33\1\0\3\33\2\0\1\34\17\0\2\34"+
    "\2\33\2\0\12\45\1\0\1\34\17\0\3\33\1\0\10\34\2\0"+
    "\2\34\2\0\26\34\1\0\7\34\1\0\2\34\1\0\5\34\2\0"+
    "\1\33\1\34\7\33\2\0\2\33\2\0\3\33\10\0\2\33\4\0"+
    "\2\34\1\0\3\34\2\33\2\0\12\45\1\0\1\34\20\0\1\33"+
    "\1\34\1\0\6\34\3\0\3\34\1\0\4\34\3\0\2\34\1\0"+
    "\1\34\1\0\2\34\3\0\2\34\3\0\3\34\3\0\14\34\4\0"+
    "\5\33\3\0\3\33\1\0\4\33\2\0\1\34\6\0\1\33\16\0"+
    "\12\45\11\0\1\34\7\0\3\33\1\0\10\34\1\0\3\34\1\0"+
    "\27\34\1\0\12\34\1\0\5\34\3\0\1\34\7\33\1\0\3\33"+
    "\1\0\4\33\7\0\2\33\1\0\2\34\6\0\2\34\2\33\2\0"+
    "\12\45\22\0\2\33\1\0\10\34\1\0\3\34\1\0\27\34\1\0"+
    "\12\34\1\0\5\34\2\0\1\33\1\34\7\33\1\0\3\33\1\0"+
    "\4\33\7\0\2\33\7\0\1\34\1\0\2\34\2\33\2\0\12\45"+
    "\1\0\2\34\17\0\2\33\1\0\10\34\1\0\3\34\1\0\51\34"+
    "\2\0\1\34\7\33\1\0\3\33\1\0\4\33\1\34\10\0\1\33"+
    "\10\0\2\34\2\33\2\0\12\45\12\0\6\34\2\0\2\33\1\0"+
    "\22\34\3\0\30\34\1\0\11\34\1\0\1\34\2\0\7\34\3\0"+
    "\1\33\4\0\6\33\1\0\1\33\1\0\10\33\6\0\12\44\2\0"+
    "\2\33\15\0\60\34\1\33\2\34\7\33\4\0\10\34\10\33\1\0"+
    "\12\45\47\0\2\34\1\0\1\34\2\0\2\34\1\0\1\34\2\0"+
    "\1\34\6\0\4\34\1\0\7\34\1\0\3\34\1\0\1\34\1\0"+
    "\1\34\2\0\2\34\1\0\4\34\1\33\2\34\6\33\1\0\2\33"+
    "\1\34\2\0\5\34\1\0\1\34\1\0\6\33\2\0\12\45\2\0"+
    "\4\34\40\0\1\34\27\0\2\33\6\0\12\45\13\0\1\33\1\0"+
    "\1\33\1\0\1\33\4\0\2\33\10\34\1\0\44\34\4\0\24\33"+
    "\1\0\2\33\5\34\13\33\1\0\44\33\11\0\1\33\71\0\53\34"+
    "\24\33\1\34\12\45\6\0\6\34\4\33\4\34\3\33\1\34\3\33"+
    "\2\34\7\33\3\34\4\33\15\34\14\33\1\34\1\33\12\45\4\33"+
    "\2\0\46\34\1\0\1\34\5\0\1\34\2\0\53\34\1\0\u014d\34"+
    "\1\0\4\34\2\0\7\34\1\0\1\34\1\0\4\34\2\0\51\34"+
    "\1\0\4\34\2\0\41\34\1\0\4\34\2\0\7\34\1\0\1\34"+
    "\1\0\4\34\2\0\17\34\1\0\71\34\1\0\4\34\2\0\103\34"+
    "\2\0\3\33\40\0\20\34\20\0\125\34\14\0\u026c\34\2\0\21\34"+
    "\1\0\32\34\5\0\113\34\3\0\3\34\17\0\15\34\1\0\4\34"+
    "\3\33\13\0\22\34\3\33\13\0\22\34\2\33\14\0\15\34\1\0"+
    "\3\34\1\0\2\33\14\0\64\34\40\33\3\0\1\34\3\0\2\34"+
    "\1\33\2\0\12\45\41\0\3\33\2\0\12\45\6\0\130\34\10\0"+
    "\51\34\1\33\1\34\5\0\106\34\12\0\35\34\3\0\14\33\4\0"+
    "\14\33\12\0\12\45\36\34\2\0\5\34\13\0\54\34\4\0\21\33"+
    "\7\34\2\33\6\0\12\45\46\0\27\34\5\33\4\0\65\34\12\33"+
    "\1\0\35\33\2\0\1\33\12\45\6\0\12\45\15\0\1\34\130\0"+
    "\5\33\57\34\21\33\7\34\4\0\12\45\21\0\11\33\14\0\3\33"+
    "\36\34\15\33\2\34\12\45\54\34\16\33\14\0\44\34\24\33\10\0"+
    "\12\45\3\0\3\34\12\45\44\34\122\0\3\33\1\0\25\33\4\34"+
    "\1\33\4\34\3\33\2\34\11\0\300\34\47\33\25\0\4\33\u0116\34"+
    "\2\0\6\34\2\0\46\34\2\0\6\34\2\0\10\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\37\34\2\0\65\34\1\0\7\34"+
    "\1\0\1\34\3\0\3\34\1\0\7\34\3\0\4\34\2\0\6\34"+
    "\4\0\15\34\5\0\3\34\1\0\7\34\16\0\5\33\30\0\1\54"+
    "\1\54\5\33\20\0\2\34\23\0\1\34\13\0\5\33\5\0\6\33"+
    "\1\0\1\34\15\0\1\34\20\0\15\34\3\0\33\34\25\0\15\33"+
    "\4\0\1\33\3\0\14\33\21\0\1\34\4\0\1\34\2\0\12\34"+
    "\1\0\1\34\3\0\5\34\6\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\4\34\1\0\13\34\2\0\4\34\5\0\5\34\4\0\1\34"+
    "\21\0\51\34\u0a77\0\57\34\1\0\57\34\1\0\205\34\6\0\4\34"+
    "\3\33\2\34\14\0\46\34\1\0\1\34\5\0\1\34\2\0\70\34"+
    "\7\0\1\34\17\0\1\33\27\34\11\0\7\34\1\0\7\34\1\0"+
    "\7\34\1\0\7\34\1\0\7\34\1\0\7\34\1\0\7\34\1\0"+
    "\7\34\1\0\40\33\57\0\1\34\u01d5\0\3\34\31\0\11\34\6\33"+
    "\1\0\5\34\2\0\5\34\4\0\126\34\2\0\2\33\2\0\3\34"+
    "\1\0\132\34\1\0\4\34\5\0\51\34\3\0\136\34\21\0\33\34"+
    "\65\0\20\34\u0200\0\u19b6\34\112\0\u51cd\34\63\0\u048d\34\103\0\56\34"+
    "\2\0\u010d\34\3\0\20\34\12\45\2\34\24\0\57\34\1\33\4\0"+
    "\12\33\1\0\31\34\7\0\1\33\120\34\2\33\45\0\11\34\2\0"+
    "\147\34\2\0\4\34\1\0\4\34\14\0\13\34\115\0\12\34\1\33"+
    "\3\34\1\33\4\34\1\33\27\34\5\33\20\0\1\34\7\0\64\34"+
    "\14\0\2\33\62\34\21\33\13\0\12\45\6\0\22\33\6\34\3\0"+
    "\1\34\4\0\12\45\34\34\10\33\2\0\27\34\15\33\14\0\35\34"+
    "\3\0\4\33\57\34\16\33\16\0\1\34\12\45\26\0\12\44\6\0"+
    "\51\34\16\33\11\0\3\34\1\33\10\34\2\33\2\0\12\45\6\0"+
    "\27\34\3\0\1\34\1\33\4\0\60\34\1\33\1\34\3\33\2\34"+
    "\2\33\5\34\2\33\1\34\1\33\1\34\30\0\3\34\2\0\13\34"+
    "\5\33\2\0\3\34\2\33\12\0\6\34\2\0\6\34\2\0\6\34"+
    "\11\0\7\34\1\0\7\34\221\0\43\34\10\33\1\0\2\33\2\0"+
    "\12\45\6\0\u2ba4\34\14\0\27\34\4\0\61\34\u2104\0\u016e\34\2\0"+
    "\152\34\46\0\7\34\14\0\5\34\5\0\1\34\1\33\12\34\1\0"+
    "\15\34\1\0\5\34\1\0\1\34\1\0\2\34\1\0\2\34\1\0"+
    "\154\34\41\0\u016b\34\22\0\100\34\2\0\66\34\50\0\15\34\3\0"+
    "\20\33\20\0\7\33\14\0\2\34\30\0\3\34\31\0\1\34\6\0"+
    "\5\34\1\0\207\34\2\0\1\33\4\0\1\34\13\0\12\45\7\0"+
    "\32\34\4\0\1\34\1\0\32\34\13\0\131\34\3\0\6\34\2\0"+
    "\6\34\2\0\6\34\2\0\3\34\3\0\2\34\3\0\2\34\22\0"+
    "\3\33\4\0\14\34\1\0\32\34\1\0\23\34\1\0\2\34\1\0"+
    "\17\34\2\0\16\34\42\0\173\34\105\0\65\34\210\0\1\33\202\0"+
    "\35\34\3\0\61\34\57\0\37\34\21\0\33\34\65\0\36\34\2\0"+
    "\44\34\4\0\10\34\1\0\5\34\52\0\236\34\2\0\12\45\u0356\0"+
    "\6\34\2\0\1\34\1\0\54\34\1\0\2\34\3\0\1\34\2\0"+
    "\27\34\252\0\26\34\12\0\32\34\106\0\70\34\6\0\2\34\100\0"+
    "\1\34\3\33\1\0\2\33\5\0\4\33\4\34\1\0\3\34\1\0"+
    "\33\34\4\0\3\33\4\0\1\33\40\0\35\34\203\0\66\34\12\0"+
    "\26\34\12\0\23\34\215\0\111\34\u03b7\0\3\33\65\34\17\33\37\0"+
    "\12\45\20\0\3\33\55\34\13\33\2\0\1\33\22\0\31\34\7\0"+
    "\12\45\6\0\3\33\44\34\16\33\1\0\12\45\100\0\3\33\60\34"+
    "\16\33\4\34\13\0\12\45\u0116\0\12\44\u0156\0\12\44\166\0\12\44"+
    "\u0176\0\12\44\46\0\53\34\15\33\10\0\12\45\146\0\12\44\u01a6\0"+
    "\12\44\u0366\0\12\44\u03a6\0\u036f\34\221\0\143\34\u0b9d\0\u042f\34\u33d1\0"+
    "\u0239\34\47\0\12\44\346\0\12\44\u03a6\0\105\34\13\0\1\34\56\33"+
    "\20\0\4\33\15\34\u4060\0\2\34\u2163\0\5\33\3\0\26\33\2\0"+
    "\7\33\36\0\4\33\224\0\3\33\u01bb\0\125\34\1\0\107\34\1\0"+
    "\2\34\2\0\1\34\2\0\2\34\2\0\4\34\1\0\14\34\1\0"+
    "\1\34\1\0\7\34\1\0\101\34\1\0\4\34\2\0\10\34\1\0"+
    "\7\34\1\0\34\34\1\0\4\34\1\0\5\34\1\0\1\34\3\0"+
    "\7\34\1\0\u0154\34\2\0\31\34\1\0\31\34\1\0\37\34\1\0"+
    "\31\34\1\0\37\34\1\0\31\34\1\0\37\34\1\0\31\34\1\0"+
    "\37\34\1\0\31\34\1\0\10\34\2\0\62\45\u1150\0\12\44\u04a6\0"+
    "\4\34\1\0\33\34\1\0\2\34\1\0\1\34\2\0\1\34\1\0"+
    "\12\34\1\0\4\34\1\0\1\34\1\0\1\34\6\0\1\34\4\0"+
    "\1\34\1\0\1\34\1\0\1\34\1\0\3\34\1\0\2\34\1\0"+
    "\1\34\2\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34\1\0"+
    "\1\34\1\0\2\34\1\0\1\34\2\0\4\34\1\0\7\34\1\0"+
    "\4\34\1\0\4\34\1\0\1\34\1\0\12\34\1\0\21\34\5\0"+
    "\3\34\1\0\5\34\1\0\21\34\u1144\0\ua6d7\34\51\0\u1035\34\13\0"+
    "\336\34\u3fe2\0\u021e\34\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\33\36\0\140\33\200\0\360\33\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\16\1\1\4\1\3\2\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\2\1\1\16\1\17\1\20\1\21\1\20\1\22"+
    "\1\23\1\24\1\25\3\0\1\3\25\0\1\26\1\27"+
    "\1\30\1\31\21\0\1\4\43\0\1\32\1\33\3\0"+
    "\1\34\1\0\1\35\5\0\1\36\1\37\4\0\1\40"+
    "\1\0\1\41\23\0\1\42\7\0\1\43\1\44\1\45"+
    "\1\46\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\270\0\346\0\u0114"+
    "\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284"+
    "\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4"+
    "\0\u0422\0\270\0\270\0\270\0\270\0\270\0\270\0\u0450"+
    "\0\u047e\0\270\0\u04ac\0\u04da\0\270\0\270\0\270\0\270"+
    "\0\u0508\0\u0536\0\270\0\u0564\0\270\0\u0592\0\u05c0\0\u05ee"+
    "\0\270\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730"+
    "\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0"+
    "\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\270\0\270"+
    "\0\270\0\270\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8"+
    "\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38"+
    "\0\u0c66\0\u0c94\0\u0cc2\0\270\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a"+
    "\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea"+
    "\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a"+
    "\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca"+
    "\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\270"+
    "\0\270\0\u133a\0\u1368\0\u1396\0\270\0\u13c4\0\270\0\u13f2"+
    "\0\u1420\0\u144e\0\u147c\0\u14aa\0\270\0\270\0\u14d8\0\u1506"+
    "\0\u1534\0\u1562\0\270\0\u1590\0\270\0\u15be\0\u15ec\0\u161a"+
    "\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a"+
    "\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa"+
    "\0\270\0\u1928\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c"+
    "\0\270\0\270\0\270\0\270\0\u1a6a\0\u1a98\0\u1ac6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\5\1\21\1\5\1\22"+
    "\1\23\1\5\1\24\1\25\1\5\1\26\1\27\1\30"+
    "\1\31\3\5\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\2\5\1\41\1\42\1\43\1\44\1\45\1\6"+
    "\2\46\1\47\2\50\46\47\1\51\1\47\1\50\2\46"+
    "\1\5\34\52\6\5\1\52\1\5\2\52\3\5\1\53"+
    "\1\52\1\46\1\52\2\5\31\54\1\5\1\54\12\5"+
    "\1\55\3\5\3\46\62\0\1\56\74\0\1\57\51\0"+
    "\1\60\51\0\1\61\63\0\1\62\50\0\1\63\45\0"+
    "\1\64\3\0\1\65\3\0\1\66\2\0\1\67\45\0"+
    "\1\70\62\0\1\71\61\0\1\72\44\0\1\73\1\74"+
    "\3\0\1\75\55\0\1\76\2\0\1\77\41\0\1\61"+
    "\1\100\7\0\1\101\2\0\1\102\7\0\1\61\45\0"+
    "\1\103\52\0\1\104\55\0\1\105\47\0\1\106\76\0"+
    "\1\61\60\0\1\107\66\0\4\40\52\0\1\41\63\0"+
    "\1\110\54\0\1\111\55\0\1\112\6\0\34\52\6\0"+
    "\1\52\1\0\2\52\4\0\1\52\1\0\1\52\2\0"+
    "\31\54\1\0\1\54\26\0\1\113\77\0\1\114\33\0"+
    "\1\115\57\0\1\116\53\0\1\117\64\0\1\120\45\0"+
    "\1\121\12\0\1\122\57\0\1\123\45\0\1\124\55\0"+
    "\1\125\61\0\1\126\2\0\1\127\42\0\1\130\70\0"+
    "\1\131\51\0\1\132\44\0\1\133\101\0\1\134\53\0"+
    "\1\135\53\0\1\134\54\0\1\136\36\0\1\137\73\0"+
    "\1\140\37\0\1\141\62\0\1\142\51\0\1\143\57\0"+
    "\1\144\57\0\1\145\51\0\1\146\71\0\1\144\51\0"+
    "\1\147\62\0\1\150\45\0\1\151\51\0\1\152\66\0"+
    "\1\153\46\0\1\154\52\0\1\155\60\0\1\156\53\0"+
    "\1\157\57\0\1\160\65\0\1\161\54\0\1\162\46\0"+
    "\1\163\56\0\1\164\52\0\1\165\64\0\1\163\53\0"+
    "\1\166\62\0\1\167\62\0\1\170\51\0\1\171\44\0"+
    "\1\155\62\0\1\172\64\0\1\173\43\0\1\174\62\0"+
    "\1\175\45\0\1\176\63\0\1\133\55\0\1\177\44\0"+
    "\1\200\62\0\1\201\55\0\1\202\55\0\1\203\50\0"+
    "\1\204\72\0\1\205\44\0\1\206\56\0\1\207\61\0"+
    "\1\170\44\0\1\144\62\0\1\210\52\0\1\211\54\0"+
    "\1\212\60\0\1\212\61\0\1\213\51\0\1\214\55\0"+
    "\1\215\65\0\1\216\46\0\1\144\55\0\1\217\55\0"+
    "\1\220\51\0\1\221\76\0\1\171\40\0\1\222\61\0"+
    "\1\223\45\0\1\224\61\0\1\225\51\0\1\226\61\0"+
    "\1\227\54\0\1\230\62\0\1\231\57\0\1\232\46\0"+
    "\1\233\61\0\1\234\56\0\1\235\43\0\1\236\64\0"+
    "\1\237\62\0\1\240\44\0\1\241\55\0\1\242\57\0"+
    "\1\243\71\0\1\244\41\0\1\245\54\0\1\246\66\0"+
    "\1\116\42\0\1\247\55\0\1\250\64\0\1\251\53\0"+
    "\1\252\47\0\1\253\62\0\1\254\64\0\1\255\55\0"+
    "\1\256\52\0\1\257\43\0\1\260\62\0\1\261\71\0"+
    "\1\262\55\0\1\263\52\0\1\264\61\0\1\265\40\0"+
    "\1\266\64\0\1\267\56\0\1\212\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6900];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\23\1\6\11\2\1\1\11\2\1\4\11"+
    "\2\1\1\11\1\1\1\11\3\0\1\11\25\0\4\11"+
    "\21\0\1\11\43\0\2\11\3\0\1\11\1\0\1\11"+
    "\5\0\2\11\4\0\1\11\1\0\1\11\23\0\1\11"+
    "\7\0\4\11\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

/* Crear un nuevo objeto java_cup.runtime.Symbol con informacion sobre
   el token actual sin valor */
 private int c_line, c_column;

 private Symbol symbol(int type) {

   return new Symbol(type,yyline,yycolumn);
 
 }
private Symbol symbol(int type,Object value){ 
	return new Symbol(type,yyline,yycolumn,value); 
}
/* Fin symbol */




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  analex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2906) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case COMENTARIO: {
              /* Error */ Utility.error(Utility.E_STARTCOMMENT,"", c_line, c_column); System.exit(1);
            }  // fall though
            case 184: break;
            case DESCRIPCION: {
              /* Error */ Utility.error(Utility.E_STARTDESC,"", c_line, c_column); System.exit(1);
            }  // fall though
            case 185: break;
            case IDENTIFICADOR: {
              /* Error  */ Utility.error(Utility.E_ENDIDENT,"", c_line, c_column); System.exit(1);
            }  // fall though
            case 186: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* Error */ Utility.error(Utility.E_UNMATCHED, yytext(), (yyline+1), (yycolumn+1)); System.exit(1);
            } 
            // fall through
          case 39: break;
          case 2: 
            { 
            } 
            // fall through
          case 40: break;
          case 3: 
            { System.out.println("Token unidad_cantidad <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.unidad_cantidad, new String(yytext()));
            } 
            // fall through
          case 41: break;
          case 4: 
            { System.out.println("Token unidad_tiempo <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.unidad_tiempo, new String(yytext()));
            } 
            // fall through
          case 42: break;
          case 5: 
            { System.out.println("Token { encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.llave_abierta);
            } 
            // fall through
          case 43: break;
          case 6: 
            { System.out.println("Token } encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
  return symbol(sym.llave_cerrada);
            } 
            // fall through
          case 44: break;
          case 7: 
            { System.out.println("Token ':' encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.dospuntos);
            } 
            // fall through
          case 45: break;
          case 8: 
            { System.out.println("Token ';' encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.puntoycoma);
            } 
            // fall through
          case 46: break;
          case 9: 
            { System.out.println("Token '-' encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.guion);
            } 
            // fall through
          case 47: break;
          case 10: 
            { System.out.println("Token '[' encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
    yybegin(DESCRIPCION);
            } 
            // fall through
          case 48: break;
          case 11: 
            { System.out.println("Token numero <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.numero, new Integer(yytext()));
            } 
            // fall through
          case 49: break;
          case 12: 
            { System.out.println("Token digito_velocidad <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.digito_velocidad, new String(yytext()));
            } 
            // fall through
          case 50: break;
          case 13: 
            { c_line=yyline+1; c_column=yycolumn+1; System.out.println("Token comilla encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
   yybegin(IDENTIFICADOR); return symbol(sym.comilla);
            } 
            // fall through
          case 51: break;
          case 14: 
            { /* Error */ Utility.error(Utility.E_ENDDESC, "", (yyline+1), (yycolumn+1)); System.exit(1);
            } 
            // fall through
          case 52: break;
          case 15: 
            { System.out.print(yytext());
            } 
            // fall through
          case 53: break;
          case 16: 
            { /*Ignoramos el contenido de los comentarios*/
            } 
            // fall through
          case 54: break;
          case 17: 
            { /*Ignoramos los saltos de línea de los comentarios*/
            } 
            // fall through
          case 55: break;
          case 18: 
            { System.out.println("Token contenido_descripcion <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.contenido_descripcion, new String(yytext()));
            } 
            // fall through
          case 56: break;
          case 19: 
            { System.out.println("Token ']' encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); yybegin(YYINITIAL);
            } 
            // fall through
          case 57: break;
          case 20: 
            { System.out.println("Token ident <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
    return symbol(sym.ident_nombre, new String(yytext()));
            } 
            // fall through
          case 58: break;
          case 21: 
            { System.out.println("Token comilla <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
     yybegin(YYINITIAL);return symbol(sym.comilla);
            } 
            // fall through
          case 59: break;
          case 22: 
            { System.out.println("Token unidad_temperatura <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.unidad_temp, new String(yytext()));
            } 
            // fall through
          case 60: break;
          case 23: 
            { c_line=yyline+1; c_column=yycolumn+1; System.out.println("Inicio comentario encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); yybegin(COMENTARIO);
            } 
            // fall through
          case 61: break;
          case 24: 
            { /* Error */ Utility.error(Utility.E_ENDCOMMENT, "", (yyline+1), (yycolumn+1)); System.exit(1);
            } 
            // fall through
          case 62: break;
          case 25: 
            { yybegin(YYINITIAL);  System.out.println("Fin comentario encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
            } 
            // fall through
          case 63: break;
          case 26: 
            { System.out.println("Token total encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
  return symbol(sym.total);
            } 
            // fall through
          case 64: break;
          case 27: 
            { System.out.println("Token verbo_mov <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.verbo_mov, new String(yytext()));
            } 
            // fall through
          case 65: break;
          case 28: 
            { System.out.println("Token pasos encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.pasos);
            } 
            // fall through
          case 66: break;
          case 29: 
            { System.out.println("Token verbo_per <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.verbo_per, new String(yytext()));
            } 
            // fall through
          case 67: break;
          case 30: 
            { System.out.println("Token receta encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.receta);
            } 
            // fall through
          case 68: break;
          case 31: 
            { System.out.println("Token tiempo encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
  return symbol(sym.tiempo);
            } 
            // fall through
          case 69: break;
          case 32: 
            { System.out.println("Token nombre encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
  return symbol(sym.nombre);
            } 
            // fall through
          case 70: break;
          case 33: 
            { System.out.println("Token verbo_coc <"+yytext()+"> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.verbo_coc, new String(yytext()));
            } 
            // fall through
          case 71: break;
          case 34: 
            { System.out.println("Token velocidad encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.velocidad);
            } 
            // fall through
          case 72: break;
          case 35: 
            { System.out.println("Token temperatura encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.temperatura);
            } 
            // fall through
          case 73: break;
          case 36: 
            { System.out.println("Token descripcion encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
  return symbol(sym.descripcion);
            } 
            // fall through
          case 74: break;
          case 37: 
            { System.out.println("Token preparacion encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.preparacion);
            } 
            // fall through
          case 75: break;
          case 38: 
            { System.out.println("Token ingredientes encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1)); 
  return symbol(sym.ingredientes);
            } 
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java analex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        analex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new analex(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
